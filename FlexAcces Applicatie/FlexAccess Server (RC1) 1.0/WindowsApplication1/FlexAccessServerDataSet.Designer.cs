//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace FlexAccess_Server {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("FlexAccessServerDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FlexAccessServerDataSet : System.Data.DataSet {
        
        private entryDataTable tableentry;
        
        private entry_categoryDataTable tableentry_category;
        
        private module_fingerprintDataTable tablemodule_fingerprint;
        
        private module_fingerprint_locationDataTable tablemodule_fingerprint_location;
        
        private module_fingerprint_location_groupDataTable tablemodule_fingerprint_location_group;
        
        private nde_ent_smc_linkDataTable tablende_ent_smc_link;
        
        private nodeDataTable tablenode;
        
        private node_categoryDataTable tablenode_category;
        
        private node_modelDataTable tablenode_model;
        
        private personDataTable tableperson;
        
        private person_groupDataTable tableperson_group;
        
        private person_has_person_groupDataTable tableperson_has_person_group;
        
        private systemclientDataTable tablesystemclient;
        
        private systemuserDataTable tablesystemuser;
        
        private zoneDataTable tablezone;
        
        private entry_controllerDataTable tableentry_controller;
        
        private person_has_entryDataTable tableperson_has_entry;
        
        private person_has_zoneDataTable tableperson_has_zone;
        
        private persongroup_has_entryDataTable tablepersongroup_has_entry;
        
        private persongroup_has_zoneDataTable tablepersongroup_has_zone;
        
        private log_entry_controllerDataTable tablelog_entry_controller;
        
        private System.Data.DataRelation relationFK_entry_entry_category;
        
        private System.Data.DataRelation relationFK_module_fingerprint_module_fingerprint_location;
        
        private System.Data.DataRelation relationFK_module_fingerprint_person;
        
        private System.Data.DataRelation relationFK_module_fingerprint_location_module_fingerprint_location_group;
        
        private System.Data.DataRelation relationFK_nde_ent_smc_link_entry;
        
        private System.Data.DataRelation relationFK_nde_ent_smc_link_node;
        
        private System.Data.DataRelation relationFK_nde_ent_smc_link_systemclient;
        
        private System.Data.DataRelation relationFK_node_node_model;
        
        private System.Data.DataRelation relationFK_node_model_node_category;
        
        private System.Data.DataRelation relationFK_person_has_person_group_person;
        
        private System.Data.DataRelation relationFK_person_has_person_group_person_group;
        
        private System.Data.DataRelation relationFK_systemuser_person;
        
        private System.Data.DataRelation relationFK_entry_zone;
        
        private System.Data.DataRelation relationFK_person_entry_entry1;
        
        private System.Data.DataRelation relationFK_person_entry_person1;
        
        private System.Data.DataRelation relationFK_person_zone_person1;
        
        private System.Data.DataRelation relationFK_person_zone_zone1;
        
        private System.Data.DataRelation relationFK_persongroup_entry_entry1;
        
        private System.Data.DataRelation relationFK_persongroup_entry_person_group1;
        
        private System.Data.DataRelation relationFK_persongroup_zone_person_group1;
        
        private System.Data.DataRelation relationFK_persongroup_zone_zone1;
        
        private System.Data.DataRelation relationFK_log_entry_controller_entry;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FlexAccessServerDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FlexAccessServerDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["entry"] != null)) {
                    base.Tables.Add(new entryDataTable(ds.Tables["entry"]));
                }
                if ((ds.Tables["entry_category"] != null)) {
                    base.Tables.Add(new entry_categoryDataTable(ds.Tables["entry_category"]));
                }
                if ((ds.Tables["module_fingerprint"] != null)) {
                    base.Tables.Add(new module_fingerprintDataTable(ds.Tables["module_fingerprint"]));
                }
                if ((ds.Tables["module_fingerprint_location"] != null)) {
                    base.Tables.Add(new module_fingerprint_locationDataTable(ds.Tables["module_fingerprint_location"]));
                }
                if ((ds.Tables["module_fingerprint_location_group"] != null)) {
                    base.Tables.Add(new module_fingerprint_location_groupDataTable(ds.Tables["module_fingerprint_location_group"]));
                }
                if ((ds.Tables["nde_ent_smc_link"] != null)) {
                    base.Tables.Add(new nde_ent_smc_linkDataTable(ds.Tables["nde_ent_smc_link"]));
                }
                if ((ds.Tables["node"] != null)) {
                    base.Tables.Add(new nodeDataTable(ds.Tables["node"]));
                }
                if ((ds.Tables["node_category"] != null)) {
                    base.Tables.Add(new node_categoryDataTable(ds.Tables["node_category"]));
                }
                if ((ds.Tables["node_model"] != null)) {
                    base.Tables.Add(new node_modelDataTable(ds.Tables["node_model"]));
                }
                if ((ds.Tables["person"] != null)) {
                    base.Tables.Add(new personDataTable(ds.Tables["person"]));
                }
                if ((ds.Tables["person_group"] != null)) {
                    base.Tables.Add(new person_groupDataTable(ds.Tables["person_group"]));
                }
                if ((ds.Tables["person_has_person_group"] != null)) {
                    base.Tables.Add(new person_has_person_groupDataTable(ds.Tables["person_has_person_group"]));
                }
                if ((ds.Tables["systemclient"] != null)) {
                    base.Tables.Add(new systemclientDataTable(ds.Tables["systemclient"]));
                }
                if ((ds.Tables["systemuser"] != null)) {
                    base.Tables.Add(new systemuserDataTable(ds.Tables["systemuser"]));
                }
                if ((ds.Tables["zone"] != null)) {
                    base.Tables.Add(new zoneDataTable(ds.Tables["zone"]));
                }
                if ((ds.Tables["entry_controller"] != null)) {
                    base.Tables.Add(new entry_controllerDataTable(ds.Tables["entry_controller"]));
                }
                if ((ds.Tables["person_has_entry"] != null)) {
                    base.Tables.Add(new person_has_entryDataTable(ds.Tables["person_has_entry"]));
                }
                if ((ds.Tables["person_has_zone"] != null)) {
                    base.Tables.Add(new person_has_zoneDataTable(ds.Tables["person_has_zone"]));
                }
                if ((ds.Tables["persongroup_has_entry"] != null)) {
                    base.Tables.Add(new persongroup_has_entryDataTable(ds.Tables["persongroup_has_entry"]));
                }
                if ((ds.Tables["persongroup_has_zone"] != null)) {
                    base.Tables.Add(new persongroup_has_zoneDataTable(ds.Tables["persongroup_has_zone"]));
                }
                if ((ds.Tables["log_entry_controller"] != null)) {
                    base.Tables.Add(new log_entry_controllerDataTable(ds.Tables["log_entry_controller"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public entryDataTable entry {
            get {
                return this.tableentry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public entry_categoryDataTable entry_category {
            get {
                return this.tableentry_category;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public module_fingerprintDataTable module_fingerprint {
            get {
                return this.tablemodule_fingerprint;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public module_fingerprint_locationDataTable module_fingerprint_location {
            get {
                return this.tablemodule_fingerprint_location;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public module_fingerprint_location_groupDataTable module_fingerprint_location_group {
            get {
                return this.tablemodule_fingerprint_location_group;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public nde_ent_smc_linkDataTable nde_ent_smc_link {
            get {
                return this.tablende_ent_smc_link;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public nodeDataTable node {
            get {
                return this.tablenode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public node_categoryDataTable node_category {
            get {
                return this.tablenode_category;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public node_modelDataTable node_model {
            get {
                return this.tablenode_model;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public personDataTable person {
            get {
                return this.tableperson;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public person_groupDataTable person_group {
            get {
                return this.tableperson_group;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public person_has_person_groupDataTable person_has_person_group {
            get {
                return this.tableperson_has_person_group;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public systemclientDataTable systemclient {
            get {
                return this.tablesystemclient;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public systemuserDataTable systemuser {
            get {
                return this.tablesystemuser;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public zoneDataTable zone {
            get {
                return this.tablezone;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public entry_controllerDataTable entry_controller {
            get {
                return this.tableentry_controller;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public person_has_entryDataTable person_has_entry {
            get {
                return this.tableperson_has_entry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public person_has_zoneDataTable person_has_zone {
            get {
                return this.tableperson_has_zone;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public persongroup_has_entryDataTable persongroup_has_entry {
            get {
                return this.tablepersongroup_has_entry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public persongroup_has_zoneDataTable persongroup_has_zone {
            get {
                return this.tablepersongroup_has_zone;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public log_entry_controllerDataTable log_entry_controller {
            get {
                return this.tablelog_entry_controller;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            FlexAccessServerDataSet cln = ((FlexAccessServerDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["entry"] != null)) {
                    base.Tables.Add(new entryDataTable(ds.Tables["entry"]));
                }
                if ((ds.Tables["entry_category"] != null)) {
                    base.Tables.Add(new entry_categoryDataTable(ds.Tables["entry_category"]));
                }
                if ((ds.Tables["module_fingerprint"] != null)) {
                    base.Tables.Add(new module_fingerprintDataTable(ds.Tables["module_fingerprint"]));
                }
                if ((ds.Tables["module_fingerprint_location"] != null)) {
                    base.Tables.Add(new module_fingerprint_locationDataTable(ds.Tables["module_fingerprint_location"]));
                }
                if ((ds.Tables["module_fingerprint_location_group"] != null)) {
                    base.Tables.Add(new module_fingerprint_location_groupDataTable(ds.Tables["module_fingerprint_location_group"]));
                }
                if ((ds.Tables["nde_ent_smc_link"] != null)) {
                    base.Tables.Add(new nde_ent_smc_linkDataTable(ds.Tables["nde_ent_smc_link"]));
                }
                if ((ds.Tables["node"] != null)) {
                    base.Tables.Add(new nodeDataTable(ds.Tables["node"]));
                }
                if ((ds.Tables["node_category"] != null)) {
                    base.Tables.Add(new node_categoryDataTable(ds.Tables["node_category"]));
                }
                if ((ds.Tables["node_model"] != null)) {
                    base.Tables.Add(new node_modelDataTable(ds.Tables["node_model"]));
                }
                if ((ds.Tables["person"] != null)) {
                    base.Tables.Add(new personDataTable(ds.Tables["person"]));
                }
                if ((ds.Tables["person_group"] != null)) {
                    base.Tables.Add(new person_groupDataTable(ds.Tables["person_group"]));
                }
                if ((ds.Tables["person_has_person_group"] != null)) {
                    base.Tables.Add(new person_has_person_groupDataTable(ds.Tables["person_has_person_group"]));
                }
                if ((ds.Tables["systemclient"] != null)) {
                    base.Tables.Add(new systemclientDataTable(ds.Tables["systemclient"]));
                }
                if ((ds.Tables["systemuser"] != null)) {
                    base.Tables.Add(new systemuserDataTable(ds.Tables["systemuser"]));
                }
                if ((ds.Tables["zone"] != null)) {
                    base.Tables.Add(new zoneDataTable(ds.Tables["zone"]));
                }
                if ((ds.Tables["entry_controller"] != null)) {
                    base.Tables.Add(new entry_controllerDataTable(ds.Tables["entry_controller"]));
                }
                if ((ds.Tables["person_has_entry"] != null)) {
                    base.Tables.Add(new person_has_entryDataTable(ds.Tables["person_has_entry"]));
                }
                if ((ds.Tables["person_has_zone"] != null)) {
                    base.Tables.Add(new person_has_zoneDataTable(ds.Tables["person_has_zone"]));
                }
                if ((ds.Tables["persongroup_has_entry"] != null)) {
                    base.Tables.Add(new persongroup_has_entryDataTable(ds.Tables["persongroup_has_entry"]));
                }
                if ((ds.Tables["persongroup_has_zone"] != null)) {
                    base.Tables.Add(new persongroup_has_zoneDataTable(ds.Tables["persongroup_has_zone"]));
                }
                if ((ds.Tables["log_entry_controller"] != null)) {
                    base.Tables.Add(new log_entry_controllerDataTable(ds.Tables["log_entry_controller"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableentry = ((entryDataTable)(base.Tables["entry"]));
            if ((initTable == true)) {
                if ((this.tableentry != null)) {
                    this.tableentry.InitVars();
                }
            }
            this.tableentry_category = ((entry_categoryDataTable)(base.Tables["entry_category"]));
            if ((initTable == true)) {
                if ((this.tableentry_category != null)) {
                    this.tableentry_category.InitVars();
                }
            }
            this.tablemodule_fingerprint = ((module_fingerprintDataTable)(base.Tables["module_fingerprint"]));
            if ((initTable == true)) {
                if ((this.tablemodule_fingerprint != null)) {
                    this.tablemodule_fingerprint.InitVars();
                }
            }
            this.tablemodule_fingerprint_location = ((module_fingerprint_locationDataTable)(base.Tables["module_fingerprint_location"]));
            if ((initTable == true)) {
                if ((this.tablemodule_fingerprint_location != null)) {
                    this.tablemodule_fingerprint_location.InitVars();
                }
            }
            this.tablemodule_fingerprint_location_group = ((module_fingerprint_location_groupDataTable)(base.Tables["module_fingerprint_location_group"]));
            if ((initTable == true)) {
                if ((this.tablemodule_fingerprint_location_group != null)) {
                    this.tablemodule_fingerprint_location_group.InitVars();
                }
            }
            this.tablende_ent_smc_link = ((nde_ent_smc_linkDataTable)(base.Tables["nde_ent_smc_link"]));
            if ((initTable == true)) {
                if ((this.tablende_ent_smc_link != null)) {
                    this.tablende_ent_smc_link.InitVars();
                }
            }
            this.tablenode = ((nodeDataTable)(base.Tables["node"]));
            if ((initTable == true)) {
                if ((this.tablenode != null)) {
                    this.tablenode.InitVars();
                }
            }
            this.tablenode_category = ((node_categoryDataTable)(base.Tables["node_category"]));
            if ((initTable == true)) {
                if ((this.tablenode_category != null)) {
                    this.tablenode_category.InitVars();
                }
            }
            this.tablenode_model = ((node_modelDataTable)(base.Tables["node_model"]));
            if ((initTable == true)) {
                if ((this.tablenode_model != null)) {
                    this.tablenode_model.InitVars();
                }
            }
            this.tableperson = ((personDataTable)(base.Tables["person"]));
            if ((initTable == true)) {
                if ((this.tableperson != null)) {
                    this.tableperson.InitVars();
                }
            }
            this.tableperson_group = ((person_groupDataTable)(base.Tables["person_group"]));
            if ((initTable == true)) {
                if ((this.tableperson_group != null)) {
                    this.tableperson_group.InitVars();
                }
            }
            this.tableperson_has_person_group = ((person_has_person_groupDataTable)(base.Tables["person_has_person_group"]));
            if ((initTable == true)) {
                if ((this.tableperson_has_person_group != null)) {
                    this.tableperson_has_person_group.InitVars();
                }
            }
            this.tablesystemclient = ((systemclientDataTable)(base.Tables["systemclient"]));
            if ((initTable == true)) {
                if ((this.tablesystemclient != null)) {
                    this.tablesystemclient.InitVars();
                }
            }
            this.tablesystemuser = ((systemuserDataTable)(base.Tables["systemuser"]));
            if ((initTable == true)) {
                if ((this.tablesystemuser != null)) {
                    this.tablesystemuser.InitVars();
                }
            }
            this.tablezone = ((zoneDataTable)(base.Tables["zone"]));
            if ((initTable == true)) {
                if ((this.tablezone != null)) {
                    this.tablezone.InitVars();
                }
            }
            this.tableentry_controller = ((entry_controllerDataTable)(base.Tables["entry_controller"]));
            if ((initTable == true)) {
                if ((this.tableentry_controller != null)) {
                    this.tableentry_controller.InitVars();
                }
            }
            this.tableperson_has_entry = ((person_has_entryDataTable)(base.Tables["person_has_entry"]));
            if ((initTable == true)) {
                if ((this.tableperson_has_entry != null)) {
                    this.tableperson_has_entry.InitVars();
                }
            }
            this.tableperson_has_zone = ((person_has_zoneDataTable)(base.Tables["person_has_zone"]));
            if ((initTable == true)) {
                if ((this.tableperson_has_zone != null)) {
                    this.tableperson_has_zone.InitVars();
                }
            }
            this.tablepersongroup_has_entry = ((persongroup_has_entryDataTable)(base.Tables["persongroup_has_entry"]));
            if ((initTable == true)) {
                if ((this.tablepersongroup_has_entry != null)) {
                    this.tablepersongroup_has_entry.InitVars();
                }
            }
            this.tablepersongroup_has_zone = ((persongroup_has_zoneDataTable)(base.Tables["persongroup_has_zone"]));
            if ((initTable == true)) {
                if ((this.tablepersongroup_has_zone != null)) {
                    this.tablepersongroup_has_zone.InitVars();
                }
            }
            this.tablelog_entry_controller = ((log_entry_controllerDataTable)(base.Tables["log_entry_controller"]));
            if ((initTable == true)) {
                if ((this.tablelog_entry_controller != null)) {
                    this.tablelog_entry_controller.InitVars();
                }
            }
            this.relationFK_entry_entry_category = this.Relations["FK_entry_entry_category"];
            this.relationFK_module_fingerprint_module_fingerprint_location = this.Relations["FK_module_fingerprint_module_fingerprint_location"];
            this.relationFK_module_fingerprint_person = this.Relations["FK_module_fingerprint_person"];
            this.relationFK_module_fingerprint_location_module_fingerprint_location_group = this.Relations["FK_module_fingerprint_location_module_fingerprint_location_group"];
            this.relationFK_nde_ent_smc_link_entry = this.Relations["FK_nde_ent_smc_link_entry"];
            this.relationFK_nde_ent_smc_link_node = this.Relations["FK_nde_ent_smc_link_node"];
            this.relationFK_nde_ent_smc_link_systemclient = this.Relations["FK_nde_ent_smc_link_systemclient"];
            this.relationFK_node_node_model = this.Relations["FK_node_node_model"];
            this.relationFK_node_model_node_category = this.Relations["FK_node_model_node_category"];
            this.relationFK_person_has_person_group_person = this.Relations["FK_person_has_person_group_person"];
            this.relationFK_person_has_person_group_person_group = this.Relations["FK_person_has_person_group_person_group"];
            this.relationFK_systemuser_person = this.Relations["FK_systemuser_person"];
            this.relationFK_entry_zone = this.Relations["FK_entry_zone"];
            this.relationFK_person_entry_entry1 = this.Relations["FK_person_entry_entry1"];
            this.relationFK_person_entry_person1 = this.Relations["FK_person_entry_person1"];
            this.relationFK_person_zone_person1 = this.Relations["FK_person_zone_person1"];
            this.relationFK_person_zone_zone1 = this.Relations["FK_person_zone_zone1"];
            this.relationFK_persongroup_entry_entry1 = this.Relations["FK_persongroup_entry_entry1"];
            this.relationFK_persongroup_entry_person_group1 = this.Relations["FK_persongroup_entry_person_group1"];
            this.relationFK_persongroup_zone_person_group1 = this.Relations["FK_persongroup_zone_person_group1"];
            this.relationFK_persongroup_zone_zone1 = this.Relations["FK_persongroup_zone_zone1"];
            this.relationFK_log_entry_controller_entry = this.Relations["FK_log_entry_controller_entry"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FlexAccessServerDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FlexAccessServerDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableentry = new entryDataTable();
            base.Tables.Add(this.tableentry);
            this.tableentry_category = new entry_categoryDataTable();
            base.Tables.Add(this.tableentry_category);
            this.tablemodule_fingerprint = new module_fingerprintDataTable();
            base.Tables.Add(this.tablemodule_fingerprint);
            this.tablemodule_fingerprint_location = new module_fingerprint_locationDataTable();
            base.Tables.Add(this.tablemodule_fingerprint_location);
            this.tablemodule_fingerprint_location_group = new module_fingerprint_location_groupDataTable();
            base.Tables.Add(this.tablemodule_fingerprint_location_group);
            this.tablende_ent_smc_link = new nde_ent_smc_linkDataTable();
            base.Tables.Add(this.tablende_ent_smc_link);
            this.tablenode = new nodeDataTable();
            base.Tables.Add(this.tablenode);
            this.tablenode_category = new node_categoryDataTable();
            base.Tables.Add(this.tablenode_category);
            this.tablenode_model = new node_modelDataTable();
            base.Tables.Add(this.tablenode_model);
            this.tableperson = new personDataTable();
            base.Tables.Add(this.tableperson);
            this.tableperson_group = new person_groupDataTable();
            base.Tables.Add(this.tableperson_group);
            this.tableperson_has_person_group = new person_has_person_groupDataTable();
            base.Tables.Add(this.tableperson_has_person_group);
            this.tablesystemclient = new systemclientDataTable();
            base.Tables.Add(this.tablesystemclient);
            this.tablesystemuser = new systemuserDataTable();
            base.Tables.Add(this.tablesystemuser);
            this.tablezone = new zoneDataTable();
            base.Tables.Add(this.tablezone);
            this.tableentry_controller = new entry_controllerDataTable();
            base.Tables.Add(this.tableentry_controller);
            this.tableperson_has_entry = new person_has_entryDataTable();
            base.Tables.Add(this.tableperson_has_entry);
            this.tableperson_has_zone = new person_has_zoneDataTable();
            base.Tables.Add(this.tableperson_has_zone);
            this.tablepersongroup_has_entry = new persongroup_has_entryDataTable();
            base.Tables.Add(this.tablepersongroup_has_entry);
            this.tablepersongroup_has_zone = new persongroup_has_zoneDataTable();
            base.Tables.Add(this.tablepersongroup_has_zone);
            this.tablelog_entry_controller = new log_entry_controllerDataTable();
            base.Tables.Add(this.tablelog_entry_controller);
            this.relationFK_entry_entry_category = new System.Data.DataRelation("FK_entry_entry_category", new System.Data.DataColumn[] {
                        this.tableentry_category.enc_idColumn}, new System.Data.DataColumn[] {
                        this.tableentry.enc_idColumn}, false);
            this.Relations.Add(this.relationFK_entry_entry_category);
            this.relationFK_module_fingerprint_module_fingerprint_location = new System.Data.DataRelation("FK_module_fingerprint_module_fingerprint_location", new System.Data.DataColumn[] {
                        this.tablemodule_fingerprint_location.flc_idColumn}, new System.Data.DataColumn[] {
                        this.tablemodule_fingerprint.flc_idColumn}, false);
            this.Relations.Add(this.relationFK_module_fingerprint_module_fingerprint_location);
            this.relationFK_module_fingerprint_person = new System.Data.DataRelation("FK_module_fingerprint_person", new System.Data.DataColumn[] {
                        this.tableperson.prs_idColumn}, new System.Data.DataColumn[] {
                        this.tablemodule_fingerprint.prs_idColumn}, false);
            this.Relations.Add(this.relationFK_module_fingerprint_person);
            this.relationFK_module_fingerprint_location_module_fingerprint_location_group = new System.Data.DataRelation("FK_module_fingerprint_location_module_fingerprint_location_group", new System.Data.DataColumn[] {
                        this.tablemodule_fingerprint_location_group.flg_idColumn}, new System.Data.DataColumn[] {
                        this.tablemodule_fingerprint_location.flg_idColumn}, false);
            this.Relations.Add(this.relationFK_module_fingerprint_location_module_fingerprint_location_group);
            this.relationFK_nde_ent_smc_link_entry = new System.Data.DataRelation("FK_nde_ent_smc_link_entry", new System.Data.DataColumn[] {
                        this.tableentry.ent_idColumn}, new System.Data.DataColumn[] {
                        this.tablende_ent_smc_link.ent_idColumn}, false);
            this.Relations.Add(this.relationFK_nde_ent_smc_link_entry);
            this.relationFK_nde_ent_smc_link_node = new System.Data.DataRelation("FK_nde_ent_smc_link_node", new System.Data.DataColumn[] {
                        this.tablenode.nde_idColumn}, new System.Data.DataColumn[] {
                        this.tablende_ent_smc_link.nde_idColumn}, false);
            this.Relations.Add(this.relationFK_nde_ent_smc_link_node);
            this.relationFK_nde_ent_smc_link_systemclient = new System.Data.DataRelation("FK_nde_ent_smc_link_systemclient", new System.Data.DataColumn[] {
                        this.tablesystemclient.smc_idColumn}, new System.Data.DataColumn[] {
                        this.tablende_ent_smc_link.smc_idColumn}, false);
            this.Relations.Add(this.relationFK_nde_ent_smc_link_systemclient);
            this.relationFK_node_node_model = new System.Data.DataRelation("FK_node_node_model", new System.Data.DataColumn[] {
                        this.tablenode_model.ndm_idColumn}, new System.Data.DataColumn[] {
                        this.tablenode.ndm_idColumn}, false);
            this.Relations.Add(this.relationFK_node_node_model);
            this.relationFK_node_model_node_category = new System.Data.DataRelation("FK_node_model_node_category", new System.Data.DataColumn[] {
                        this.tablenode_category.ndc_idColumn}, new System.Data.DataColumn[] {
                        this.tablenode_model.ndc_idColumn}, false);
            this.Relations.Add(this.relationFK_node_model_node_category);
            this.relationFK_person_has_person_group_person = new System.Data.DataRelation("FK_person_has_person_group_person", new System.Data.DataColumn[] {
                        this.tableperson.prs_idColumn}, new System.Data.DataColumn[] {
                        this.tableperson_has_person_group.prs_idColumn}, false);
            this.Relations.Add(this.relationFK_person_has_person_group_person);
            this.relationFK_person_has_person_group_person_group = new System.Data.DataRelation("FK_person_has_person_group_person_group", new System.Data.DataColumn[] {
                        this.tableperson_group.psg_idColumn}, new System.Data.DataColumn[] {
                        this.tableperson_has_person_group.psg_idColumn}, false);
            this.Relations.Add(this.relationFK_person_has_person_group_person_group);
            this.relationFK_systemuser_person = new System.Data.DataRelation("FK_systemuser_person", new System.Data.DataColumn[] {
                        this.tableperson.prs_idColumn}, new System.Data.DataColumn[] {
                        this.tablesystemuser.prs_idColumn}, false);
            this.Relations.Add(this.relationFK_systemuser_person);
            this.relationFK_entry_zone = new System.Data.DataRelation("FK_entry_zone", new System.Data.DataColumn[] {
                        this.tablezone.zne_idColumn}, new System.Data.DataColumn[] {
                        this.tableentry.zne_idColumn}, false);
            this.Relations.Add(this.relationFK_entry_zone);
            this.relationFK_person_entry_entry1 = new System.Data.DataRelation("FK_person_entry_entry1", new System.Data.DataColumn[] {
                        this.tableentry.ent_idColumn}, new System.Data.DataColumn[] {
                        this.tableperson_has_entry.ent_idColumn}, false);
            this.Relations.Add(this.relationFK_person_entry_entry1);
            this.relationFK_person_entry_person1 = new System.Data.DataRelation("FK_person_entry_person1", new System.Data.DataColumn[] {
                        this.tableperson.prs_idColumn}, new System.Data.DataColumn[] {
                        this.tableperson_has_entry.prs_idColumn}, false);
            this.Relations.Add(this.relationFK_person_entry_person1);
            this.relationFK_person_zone_person1 = new System.Data.DataRelation("FK_person_zone_person1", new System.Data.DataColumn[] {
                        this.tableperson.prs_idColumn}, new System.Data.DataColumn[] {
                        this.tableperson_has_zone.prs_idColumn}, false);
            this.Relations.Add(this.relationFK_person_zone_person1);
            this.relationFK_person_zone_zone1 = new System.Data.DataRelation("FK_person_zone_zone1", new System.Data.DataColumn[] {
                        this.tablezone.zne_idColumn}, new System.Data.DataColumn[] {
                        this.tableperson_has_zone.zne_idColumn}, false);
            this.Relations.Add(this.relationFK_person_zone_zone1);
            this.relationFK_persongroup_entry_entry1 = new System.Data.DataRelation("FK_persongroup_entry_entry1", new System.Data.DataColumn[] {
                        this.tableentry.ent_idColumn}, new System.Data.DataColumn[] {
                        this.tablepersongroup_has_entry.ent_idColumn}, false);
            this.Relations.Add(this.relationFK_persongroup_entry_entry1);
            this.relationFK_persongroup_entry_person_group1 = new System.Data.DataRelation("FK_persongroup_entry_person_group1", new System.Data.DataColumn[] {
                        this.tableperson_group.psg_idColumn}, new System.Data.DataColumn[] {
                        this.tablepersongroup_has_entry.psg_idColumn}, false);
            this.Relations.Add(this.relationFK_persongroup_entry_person_group1);
            this.relationFK_persongroup_zone_person_group1 = new System.Data.DataRelation("FK_persongroup_zone_person_group1", new System.Data.DataColumn[] {
                        this.tableperson_group.psg_idColumn}, new System.Data.DataColumn[] {
                        this.tablepersongroup_has_zone.psg_idColumn}, false);
            this.Relations.Add(this.relationFK_persongroup_zone_person_group1);
            this.relationFK_persongroup_zone_zone1 = new System.Data.DataRelation("FK_persongroup_zone_zone1", new System.Data.DataColumn[] {
                        this.tablezone.zne_idColumn}, new System.Data.DataColumn[] {
                        this.tablepersongroup_has_zone.zne_idColumn}, false);
            this.Relations.Add(this.relationFK_persongroup_zone_zone1);
            this.relationFK_log_entry_controller_entry = new System.Data.DataRelation("FK_log_entry_controller_entry", new System.Data.DataColumn[] {
                        this.tableentry.ent_idColumn}, new System.Data.DataColumn[] {
                        this.tablelog_entry_controller.lgc_ent_idColumn}, false);
            this.Relations.Add(this.relationFK_log_entry_controller_entry);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeentry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeentry_category() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemodule_fingerprint() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemodule_fingerprint_location() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemodule_fingerprint_location_group() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializende_ent_smc_link() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializenode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializenode_category() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializenode_model() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeperson() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeperson_group() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeperson_has_person_group() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesystemclient() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesystemuser() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializezone() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeentry_controller() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeperson_has_entry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeperson_has_zone() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepersongroup_has_entry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepersongroup_has_zone() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializelog_entry_controller() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void entryRowChangeEventHandler(object sender, entryRowChangeEvent e);
        
        public delegate void entry_categoryRowChangeEventHandler(object sender, entry_categoryRowChangeEvent e);
        
        public delegate void module_fingerprintRowChangeEventHandler(object sender, module_fingerprintRowChangeEvent e);
        
        public delegate void module_fingerprint_locationRowChangeEventHandler(object sender, module_fingerprint_locationRowChangeEvent e);
        
        public delegate void module_fingerprint_location_groupRowChangeEventHandler(object sender, module_fingerprint_location_groupRowChangeEvent e);
        
        public delegate void nde_ent_smc_linkRowChangeEventHandler(object sender, nde_ent_smc_linkRowChangeEvent e);
        
        public delegate void nodeRowChangeEventHandler(object sender, nodeRowChangeEvent e);
        
        public delegate void node_categoryRowChangeEventHandler(object sender, node_categoryRowChangeEvent e);
        
        public delegate void node_modelRowChangeEventHandler(object sender, node_modelRowChangeEvent e);
        
        public delegate void personRowChangeEventHandler(object sender, personRowChangeEvent e);
        
        public delegate void person_groupRowChangeEventHandler(object sender, person_groupRowChangeEvent e);
        
        public delegate void person_has_person_groupRowChangeEventHandler(object sender, person_has_person_groupRowChangeEvent e);
        
        public delegate void systemclientRowChangeEventHandler(object sender, systemclientRowChangeEvent e);
        
        public delegate void systemuserRowChangeEventHandler(object sender, systemuserRowChangeEvent e);
        
        public delegate void zoneRowChangeEventHandler(object sender, zoneRowChangeEvent e);
        
        public delegate void entry_controllerRowChangeEventHandler(object sender, entry_controllerRowChangeEvent e);
        
        public delegate void person_has_entryRowChangeEventHandler(object sender, person_has_entryRowChangeEvent e);
        
        public delegate void person_has_zoneRowChangeEventHandler(object sender, person_has_zoneRowChangeEvent e);
        
        public delegate void persongroup_has_entryRowChangeEventHandler(object sender, persongroup_has_entryRowChangeEvent e);
        
        public delegate void persongroup_has_zoneRowChangeEventHandler(object sender, persongroup_has_zoneRowChangeEvent e);
        
        public delegate void log_entry_controllerRowChangeEventHandler(object sender, log_entry_controllerRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class entryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnent_id;
            
            private System.Data.DataColumn columnenc_id;
            
            private System.Data.DataColumn columnent_active;
            
            private System.Data.DataColumn columnzne_id;
            
            private System.Data.DataColumn columnecn_id;
            
            private System.Data.DataColumn columnecn_port_number;
            
            private System.Data.DataColumn columnenc_powered;
            
            private System.Data.DataColumn columnent_name;
            
            private System.Data.DataColumn columnent_remark;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryDataTable() {
                this.TableName = "entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected entryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ent_idColumn {
                get {
                    return this.columnent_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enc_idColumn {
                get {
                    return this.columnenc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ent_activeColumn {
                get {
                    return this.columnent_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_idColumn {
                get {
                    return this.columnzne_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ecn_idColumn {
                get {
                    return this.columnecn_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ecn_port_numberColumn {
                get {
                    return this.columnecn_port_number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enc_poweredColumn {
                get {
                    return this.columnenc_powered;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ent_nameColumn {
                get {
                    return this.columnent_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ent_remarkColumn {
                get {
                    return this.columnent_remark;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow this[int index] {
                get {
                    return ((entryRow)(this.Rows[index]));
                }
            }
            
            public event entryRowChangeEventHandler entryRowChanging;
            
            public event entryRowChangeEventHandler entryRowChanged;
            
            public event entryRowChangeEventHandler entryRowDeleting;
            
            public event entryRowChangeEventHandler entryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddentryRow(entryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow AddentryRow(entry_categoryRow parententry_categoryRowByFK_entry_entry_category, bool ent_active, zoneRow parentzoneRowByFK_entry_zone, int ecn_id, int ecn_port_number, bool enc_powered, string ent_name, string ent_remark) {
                entryRow rowentryRow = ((entryRow)(this.NewRow()));
                rowentryRow.ItemArray = new object[] {
                        null,
                        parententry_categoryRowByFK_entry_entry_category[0],
                        ent_active,
                        parentzoneRowByFK_entry_zone[0],
                        ecn_id,
                        ecn_port_number,
                        enc_powered,
                        ent_name,
                        ent_remark};
                this.Rows.Add(rowentryRow);
                return rowentryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow FindByent_id(int ent_id) {
                return ((entryRow)(this.Rows.Find(new object[] {
                            ent_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                entryDataTable cln = ((entryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new entryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnent_id = base.Columns["ent_id"];
                this.columnenc_id = base.Columns["enc_id"];
                this.columnent_active = base.Columns["ent_active"];
                this.columnzne_id = base.Columns["zne_id"];
                this.columnecn_id = base.Columns["ecn_id"];
                this.columnecn_port_number = base.Columns["ecn_port_number"];
                this.columnenc_powered = base.Columns["enc_powered"];
                this.columnent_name = base.Columns["ent_name"];
                this.columnent_remark = base.Columns["ent_remark"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnent_id = new System.Data.DataColumn("ent_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnent_id);
                this.columnenc_id = new System.Data.DataColumn("enc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenc_id);
                this.columnent_active = new System.Data.DataColumn("ent_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnent_active);
                this.columnzne_id = new System.Data.DataColumn("zne_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_id);
                this.columnecn_id = new System.Data.DataColumn("ecn_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnecn_id);
                this.columnecn_port_number = new System.Data.DataColumn("ecn_port_number", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnecn_port_number);
                this.columnenc_powered = new System.Data.DataColumn("enc_powered", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenc_powered);
                this.columnent_name = new System.Data.DataColumn("ent_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnent_name);
                this.columnent_remark = new System.Data.DataColumn("ent_remark", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnent_remark);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnent_id}, true));
                this.columnent_id.AutoIncrement = true;
                this.columnent_id.AllowDBNull = false;
                this.columnent_id.ReadOnly = true;
                this.columnent_id.Unique = true;
                this.columnent_name.MaxLength = 100;
                this.columnent_remark.MaxLength = 300;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow NewentryRow() {
                return ((entryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new entryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(entryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.entryRowChanged != null)) {
                    this.entryRowChanged(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.entryRowChanging != null)) {
                    this.entryRowChanging(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.entryRowDeleted != null)) {
                    this.entryRowDeleted(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.entryRowDeleting != null)) {
                    this.entryRowDeleting(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveentryRow(entryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "entryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class entry_categoryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnenc_id;
            
            private System.Data.DataColumn columnenc_name;
            
            private System.Data.DataColumn columnenc_description;
            
            private System.Data.DataColumn columnenc_active;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryDataTable() {
                this.TableName = "entry_category";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entry_categoryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected entry_categoryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enc_idColumn {
                get {
                    return this.columnenc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enc_nameColumn {
                get {
                    return this.columnenc_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enc_descriptionColumn {
                get {
                    return this.columnenc_description;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enc_activeColumn {
                get {
                    return this.columnenc_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryRow this[int index] {
                get {
                    return ((entry_categoryRow)(this.Rows[index]));
                }
            }
            
            public event entry_categoryRowChangeEventHandler entry_categoryRowChanging;
            
            public event entry_categoryRowChangeEventHandler entry_categoryRowChanged;
            
            public event entry_categoryRowChangeEventHandler entry_categoryRowDeleting;
            
            public event entry_categoryRowChangeEventHandler entry_categoryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addentry_categoryRow(entry_categoryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryRow Addentry_categoryRow(string enc_name, string enc_description, bool enc_active) {
                entry_categoryRow rowentry_categoryRow = ((entry_categoryRow)(this.NewRow()));
                rowentry_categoryRow.ItemArray = new object[] {
                        null,
                        enc_name,
                        enc_description,
                        enc_active};
                this.Rows.Add(rowentry_categoryRow);
                return rowentry_categoryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryRow FindByenc_id(int enc_id) {
                return ((entry_categoryRow)(this.Rows.Find(new object[] {
                            enc_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                entry_categoryDataTable cln = ((entry_categoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new entry_categoryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnenc_id = base.Columns["enc_id"];
                this.columnenc_name = base.Columns["enc_name"];
                this.columnenc_description = base.Columns["enc_description"];
                this.columnenc_active = base.Columns["enc_active"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnenc_id = new System.Data.DataColumn("enc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenc_id);
                this.columnenc_name = new System.Data.DataColumn("enc_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenc_name);
                this.columnenc_description = new System.Data.DataColumn("enc_description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenc_description);
                this.columnenc_active = new System.Data.DataColumn("enc_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnenc_active);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnenc_id}, true));
                this.columnenc_id.AutoIncrement = true;
                this.columnenc_id.AllowDBNull = false;
                this.columnenc_id.ReadOnly = true;
                this.columnenc_id.Unique = true;
                this.columnenc_name.MaxLength = 50;
                this.columnenc_description.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryRow Newentry_categoryRow() {
                return ((entry_categoryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new entry_categoryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(entry_categoryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.entry_categoryRowChanged != null)) {
                    this.entry_categoryRowChanged(this, new entry_categoryRowChangeEvent(((entry_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.entry_categoryRowChanging != null)) {
                    this.entry_categoryRowChanging(this, new entry_categoryRowChangeEvent(((entry_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.entry_categoryRowDeleted != null)) {
                    this.entry_categoryRowDeleted(this, new entry_categoryRowChangeEvent(((entry_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.entry_categoryRowDeleting != null)) {
                    this.entry_categoryRowDeleting(this, new entry_categoryRowChangeEvent(((entry_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeentry_categoryRow(entry_categoryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "entry_categoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class module_fingerprintDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnprs_id;
            
            private System.Data.DataColumn columnflc_id;
            
            private System.Data.DataColumn columnmfp_data;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintDataTable() {
                this.TableName = "module_fingerprint";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal module_fingerprintDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected module_fingerprintDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_idColumn {
                get {
                    return this.columnprs_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flc_idColumn {
                get {
                    return this.columnflc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn mfp_dataColumn {
                get {
                    return this.columnmfp_data;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRow this[int index] {
                get {
                    return ((module_fingerprintRow)(this.Rows[index]));
                }
            }
            
            public event module_fingerprintRowChangeEventHandler module_fingerprintRowChanging;
            
            public event module_fingerprintRowChangeEventHandler module_fingerprintRowChanged;
            
            public event module_fingerprintRowChangeEventHandler module_fingerprintRowDeleting;
            
            public event module_fingerprintRowChangeEventHandler module_fingerprintRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmodule_fingerprintRow(module_fingerprintRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRow Addmodule_fingerprintRow(personRow parentpersonRowByFK_module_fingerprint_person, module_fingerprint_locationRow parentmodule_fingerprint_locationRowByFK_module_fingerprint_module_fingerprint_location, byte[] mfp_data) {
                module_fingerprintRow rowmodule_fingerprintRow = ((module_fingerprintRow)(this.NewRow()));
                rowmodule_fingerprintRow.ItemArray = new object[] {
                        parentpersonRowByFK_module_fingerprint_person[0],
                        parentmodule_fingerprint_locationRowByFK_module_fingerprint_module_fingerprint_location[0],
                        mfp_data};
                this.Rows.Add(rowmodule_fingerprintRow);
                return rowmodule_fingerprintRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRow FindByprs_idflc_id(int prs_id, int flc_id) {
                return ((module_fingerprintRow)(this.Rows.Find(new object[] {
                            prs_id,
                            flc_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                module_fingerprintDataTable cln = ((module_fingerprintDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new module_fingerprintDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprs_id = base.Columns["prs_id"];
                this.columnflc_id = base.Columns["flc_id"];
                this.columnmfp_data = base.Columns["mfp_data"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprs_id = new System.Data.DataColumn("prs_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_id);
                this.columnflc_id = new System.Data.DataColumn("flc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflc_id);
                this.columnmfp_data = new System.Data.DataColumn("mfp_data", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmfp_data);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnprs_id,
                                this.columnflc_id}, true));
                this.columnprs_id.AllowDBNull = false;
                this.columnflc_id.AllowDBNull = false;
                this.columnmfp_data.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRow Newmodule_fingerprintRow() {
                return ((module_fingerprintRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new module_fingerprintRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(module_fingerprintRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.module_fingerprintRowChanged != null)) {
                    this.module_fingerprintRowChanged(this, new module_fingerprintRowChangeEvent(((module_fingerprintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.module_fingerprintRowChanging != null)) {
                    this.module_fingerprintRowChanging(this, new module_fingerprintRowChangeEvent(((module_fingerprintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.module_fingerprintRowDeleted != null)) {
                    this.module_fingerprintRowDeleted(this, new module_fingerprintRowChangeEvent(((module_fingerprintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.module_fingerprintRowDeleting != null)) {
                    this.module_fingerprintRowDeleting(this, new module_fingerprintRowChangeEvent(((module_fingerprintRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemodule_fingerprintRow(module_fingerprintRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "module_fingerprintDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class module_fingerprint_locationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnflc_id;
            
            private System.Data.DataColumn columnflg_id;
            
            private System.Data.DataColumn columnflc_name;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationDataTable() {
                this.TableName = "module_fingerprint_location";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal module_fingerprint_locationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected module_fingerprint_locationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flc_idColumn {
                get {
                    return this.columnflc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flg_idColumn {
                get {
                    return this.columnflg_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flc_nameColumn {
                get {
                    return this.columnflc_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRow this[int index] {
                get {
                    return ((module_fingerprint_locationRow)(this.Rows[index]));
                }
            }
            
            public event module_fingerprint_locationRowChangeEventHandler module_fingerprint_locationRowChanging;
            
            public event module_fingerprint_locationRowChangeEventHandler module_fingerprint_locationRowChanged;
            
            public event module_fingerprint_locationRowChangeEventHandler module_fingerprint_locationRowDeleting;
            
            public event module_fingerprint_locationRowChangeEventHandler module_fingerprint_locationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmodule_fingerprint_locationRow(module_fingerprint_locationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRow Addmodule_fingerprint_locationRow(module_fingerprint_location_groupRow parentmodule_fingerprint_location_groupRowByFK_module_fingerprint_location_module_fingerprint_location_group, string flc_name) {
                module_fingerprint_locationRow rowmodule_fingerprint_locationRow = ((module_fingerprint_locationRow)(this.NewRow()));
                rowmodule_fingerprint_locationRow.ItemArray = new object[] {
                        null,
                        parentmodule_fingerprint_location_groupRowByFK_module_fingerprint_location_module_fingerprint_location_group[0],
                        flc_name};
                this.Rows.Add(rowmodule_fingerprint_locationRow);
                return rowmodule_fingerprint_locationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRow FindByflc_id(int flc_id) {
                return ((module_fingerprint_locationRow)(this.Rows.Find(new object[] {
                            flc_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                module_fingerprint_locationDataTable cln = ((module_fingerprint_locationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new module_fingerprint_locationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnflc_id = base.Columns["flc_id"];
                this.columnflg_id = base.Columns["flg_id"];
                this.columnflc_name = base.Columns["flc_name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnflc_id = new System.Data.DataColumn("flc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflc_id);
                this.columnflg_id = new System.Data.DataColumn("flg_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflg_id);
                this.columnflc_name = new System.Data.DataColumn("flc_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflc_name);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnflc_id}, true));
                this.columnflc_id.AutoIncrement = true;
                this.columnflc_id.AllowDBNull = false;
                this.columnflc_id.ReadOnly = true;
                this.columnflc_id.Unique = true;
                this.columnflg_id.AllowDBNull = false;
                this.columnflc_name.AllowDBNull = false;
                this.columnflc_name.MaxLength = 25;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRow Newmodule_fingerprint_locationRow() {
                return ((module_fingerprint_locationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new module_fingerprint_locationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(module_fingerprint_locationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.module_fingerprint_locationRowChanged != null)) {
                    this.module_fingerprint_locationRowChanged(this, new module_fingerprint_locationRowChangeEvent(((module_fingerprint_locationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.module_fingerprint_locationRowChanging != null)) {
                    this.module_fingerprint_locationRowChanging(this, new module_fingerprint_locationRowChangeEvent(((module_fingerprint_locationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.module_fingerprint_locationRowDeleted != null)) {
                    this.module_fingerprint_locationRowDeleted(this, new module_fingerprint_locationRowChangeEvent(((module_fingerprint_locationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.module_fingerprint_locationRowDeleting != null)) {
                    this.module_fingerprint_locationRowDeleting(this, new module_fingerprint_locationRowChangeEvent(((module_fingerprint_locationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemodule_fingerprint_locationRow(module_fingerprint_locationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "module_fingerprint_locationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class module_fingerprint_location_groupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnflg_id;
            
            private System.Data.DataColumn columnflg_name;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupDataTable() {
                this.TableName = "module_fingerprint_location_group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal module_fingerprint_location_groupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected module_fingerprint_location_groupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flg_idColumn {
                get {
                    return this.columnflg_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn flg_nameColumn {
                get {
                    return this.columnflg_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupRow this[int index] {
                get {
                    return ((module_fingerprint_location_groupRow)(this.Rows[index]));
                }
            }
            
            public event module_fingerprint_location_groupRowChangeEventHandler module_fingerprint_location_groupRowChanging;
            
            public event module_fingerprint_location_groupRowChangeEventHandler module_fingerprint_location_groupRowChanged;
            
            public event module_fingerprint_location_groupRowChangeEventHandler module_fingerprint_location_groupRowDeleting;
            
            public event module_fingerprint_location_groupRowChangeEventHandler module_fingerprint_location_groupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmodule_fingerprint_location_groupRow(module_fingerprint_location_groupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupRow Addmodule_fingerprint_location_groupRow(string flg_name) {
                module_fingerprint_location_groupRow rowmodule_fingerprint_location_groupRow = ((module_fingerprint_location_groupRow)(this.NewRow()));
                rowmodule_fingerprint_location_groupRow.ItemArray = new object[] {
                        null,
                        flg_name};
                this.Rows.Add(rowmodule_fingerprint_location_groupRow);
                return rowmodule_fingerprint_location_groupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupRow FindByflg_id(int flg_id) {
                return ((module_fingerprint_location_groupRow)(this.Rows.Find(new object[] {
                            flg_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                module_fingerprint_location_groupDataTable cln = ((module_fingerprint_location_groupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new module_fingerprint_location_groupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnflg_id = base.Columns["flg_id"];
                this.columnflg_name = base.Columns["flg_name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnflg_id = new System.Data.DataColumn("flg_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflg_id);
                this.columnflg_name = new System.Data.DataColumn("flg_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnflg_name);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnflg_id}, true));
                this.columnflg_id.AutoIncrement = true;
                this.columnflg_id.AllowDBNull = false;
                this.columnflg_id.ReadOnly = true;
                this.columnflg_id.Unique = true;
                this.columnflg_name.AllowDBNull = false;
                this.columnflg_name.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupRow Newmodule_fingerprint_location_groupRow() {
                return ((module_fingerprint_location_groupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new module_fingerprint_location_groupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(module_fingerprint_location_groupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.module_fingerprint_location_groupRowChanged != null)) {
                    this.module_fingerprint_location_groupRowChanged(this, new module_fingerprint_location_groupRowChangeEvent(((module_fingerprint_location_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.module_fingerprint_location_groupRowChanging != null)) {
                    this.module_fingerprint_location_groupRowChanging(this, new module_fingerprint_location_groupRowChangeEvent(((module_fingerprint_location_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.module_fingerprint_location_groupRowDeleted != null)) {
                    this.module_fingerprint_location_groupRowDeleted(this, new module_fingerprint_location_groupRowChangeEvent(((module_fingerprint_location_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.module_fingerprint_location_groupRowDeleting != null)) {
                    this.module_fingerprint_location_groupRowDeleting(this, new module_fingerprint_location_groupRowChangeEvent(((module_fingerprint_location_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemodule_fingerprint_location_groupRow(module_fingerprint_location_groupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "module_fingerprint_location_groupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class nde_ent_smc_linkDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlnk_id;
            
            private System.Data.DataColumn columnsmc_id;
            
            private System.Data.DataColumn columnnde_id;
            
            private System.Data.DataColumn columnent_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkDataTable() {
                this.TableName = "nde_ent_smc_link";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nde_ent_smc_linkDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected nde_ent_smc_linkDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lnk_idColumn {
                get {
                    return this.columnlnk_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn smc_idColumn {
                get {
                    return this.columnsmc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nde_idColumn {
                get {
                    return this.columnnde_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ent_idColumn {
                get {
                    return this.columnent_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow this[int index] {
                get {
                    return ((nde_ent_smc_linkRow)(this.Rows[index]));
                }
            }
            
            public event nde_ent_smc_linkRowChangeEventHandler nde_ent_smc_linkRowChanging;
            
            public event nde_ent_smc_linkRowChangeEventHandler nde_ent_smc_linkRowChanged;
            
            public event nde_ent_smc_linkRowChangeEventHandler nde_ent_smc_linkRowDeleting;
            
            public event nde_ent_smc_linkRowChangeEventHandler nde_ent_smc_linkRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addnde_ent_smc_linkRow(nde_ent_smc_linkRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow Addnde_ent_smc_linkRow(systemclientRow parentsystemclientRowByFK_nde_ent_smc_link_systemclient, nodeRow parentnodeRowByFK_nde_ent_smc_link_node, entryRow parententryRowByFK_nde_ent_smc_link_entry) {
                nde_ent_smc_linkRow rownde_ent_smc_linkRow = ((nde_ent_smc_linkRow)(this.NewRow()));
                rownde_ent_smc_linkRow.ItemArray = new object[] {
                        null,
                        parentsystemclientRowByFK_nde_ent_smc_link_systemclient[0],
                        parentnodeRowByFK_nde_ent_smc_link_node[0],
                        parententryRowByFK_nde_ent_smc_link_entry[0]};
                this.Rows.Add(rownde_ent_smc_linkRow);
                return rownde_ent_smc_linkRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow FindBylnk_id(int lnk_id) {
                return ((nde_ent_smc_linkRow)(this.Rows.Find(new object[] {
                            lnk_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                nde_ent_smc_linkDataTable cln = ((nde_ent_smc_linkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new nde_ent_smc_linkDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlnk_id = base.Columns["lnk_id"];
                this.columnsmc_id = base.Columns["smc_id"];
                this.columnnde_id = base.Columns["nde_id"];
                this.columnent_id = base.Columns["ent_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlnk_id = new System.Data.DataColumn("lnk_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlnk_id);
                this.columnsmc_id = new System.Data.DataColumn("smc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsmc_id);
                this.columnnde_id = new System.Data.DataColumn("nde_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnde_id);
                this.columnent_id = new System.Data.DataColumn("ent_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnent_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnlnk_id}, true));
                this.columnlnk_id.AutoIncrement = true;
                this.columnlnk_id.AllowDBNull = false;
                this.columnlnk_id.ReadOnly = true;
                this.columnlnk_id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow Newnde_ent_smc_linkRow() {
                return ((nde_ent_smc_linkRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new nde_ent_smc_linkRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(nde_ent_smc_linkRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.nde_ent_smc_linkRowChanged != null)) {
                    this.nde_ent_smc_linkRowChanged(this, new nde_ent_smc_linkRowChangeEvent(((nde_ent_smc_linkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.nde_ent_smc_linkRowChanging != null)) {
                    this.nde_ent_smc_linkRowChanging(this, new nde_ent_smc_linkRowChangeEvent(((nde_ent_smc_linkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.nde_ent_smc_linkRowDeleted != null)) {
                    this.nde_ent_smc_linkRowDeleted(this, new nde_ent_smc_linkRowChangeEvent(((nde_ent_smc_linkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.nde_ent_smc_linkRowDeleting != null)) {
                    this.nde_ent_smc_linkRowDeleting(this, new nde_ent_smc_linkRowChangeEvent(((nde_ent_smc_linkRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removende_ent_smc_linkRow(nde_ent_smc_linkRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "nde_ent_smc_linkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class nodeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnde_id;
            
            private System.Data.DataColumn columnnde_name;
            
            private System.Data.DataColumn columnndm_id;
            
            private System.Data.DataColumn columnnde_active;
            
            private System.Data.DataColumn columnnde_remark;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeDataTable() {
                this.TableName = "node";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nodeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected nodeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nde_idColumn {
                get {
                    return this.columnnde_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nde_nameColumn {
                get {
                    return this.columnnde_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndm_idColumn {
                get {
                    return this.columnndm_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nde_activeColumn {
                get {
                    return this.columnnde_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nde_remarkColumn {
                get {
                    return this.columnnde_remark;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow this[int index] {
                get {
                    return ((nodeRow)(this.Rows[index]));
                }
            }
            
            public event nodeRowChangeEventHandler nodeRowChanging;
            
            public event nodeRowChangeEventHandler nodeRowChanged;
            
            public event nodeRowChangeEventHandler nodeRowDeleting;
            
            public event nodeRowChangeEventHandler nodeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddnodeRow(nodeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow AddnodeRow(string nde_name, node_modelRow parentnode_modelRowByFK_node_node_model, bool nde_active, string nde_remark) {
                nodeRow rownodeRow = ((nodeRow)(this.NewRow()));
                rownodeRow.ItemArray = new object[] {
                        null,
                        nde_name,
                        parentnode_modelRowByFK_node_node_model[0],
                        nde_active,
                        nde_remark};
                this.Rows.Add(rownodeRow);
                return rownodeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow FindBynde_id(int nde_id) {
                return ((nodeRow)(this.Rows.Find(new object[] {
                            nde_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                nodeDataTable cln = ((nodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new nodeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnde_id = base.Columns["nde_id"];
                this.columnnde_name = base.Columns["nde_name"];
                this.columnndm_id = base.Columns["ndm_id"];
                this.columnnde_active = base.Columns["nde_active"];
                this.columnnde_remark = base.Columns["nde_remark"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnde_id = new System.Data.DataColumn("nde_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnde_id);
                this.columnnde_name = new System.Data.DataColumn("nde_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnde_name);
                this.columnndm_id = new System.Data.DataColumn("ndm_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndm_id);
                this.columnnde_active = new System.Data.DataColumn("nde_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnde_active);
                this.columnnde_remark = new System.Data.DataColumn("nde_remark", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnde_remark);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnnde_id}, true));
                this.columnnde_id.AutoIncrement = true;
                this.columnnde_id.AllowDBNull = false;
                this.columnnde_id.ReadOnly = true;
                this.columnnde_id.Unique = true;
                this.columnnde_name.MaxLength = 10;
                this.columnnde_remark.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow NewnodeRow() {
                return ((nodeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new nodeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(nodeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.nodeRowChanged != null)) {
                    this.nodeRowChanged(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.nodeRowChanging != null)) {
                    this.nodeRowChanging(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.nodeRowDeleted != null)) {
                    this.nodeRowDeleted(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.nodeRowDeleting != null)) {
                    this.nodeRowDeleting(this, new nodeRowChangeEvent(((nodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovenodeRow(nodeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "nodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class node_categoryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnndc_id;
            
            private System.Data.DataColumn columnndc_name;
            
            private System.Data.DataColumn columnndc_description;
            
            private System.Data.DataColumn columnndc_active;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryDataTable() {
                this.TableName = "node_category";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal node_categoryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected node_categoryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndc_idColumn {
                get {
                    return this.columnndc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndc_nameColumn {
                get {
                    return this.columnndc_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndc_descriptionColumn {
                get {
                    return this.columnndc_description;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndc_activeColumn {
                get {
                    return this.columnndc_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryRow this[int index] {
                get {
                    return ((node_categoryRow)(this.Rows[index]));
                }
            }
            
            public event node_categoryRowChangeEventHandler node_categoryRowChanging;
            
            public event node_categoryRowChangeEventHandler node_categoryRowChanged;
            
            public event node_categoryRowChangeEventHandler node_categoryRowDeleting;
            
            public event node_categoryRowChangeEventHandler node_categoryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addnode_categoryRow(node_categoryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryRow Addnode_categoryRow(string ndc_name, string ndc_description, bool ndc_active) {
                node_categoryRow rownode_categoryRow = ((node_categoryRow)(this.NewRow()));
                rownode_categoryRow.ItemArray = new object[] {
                        null,
                        ndc_name,
                        ndc_description,
                        ndc_active};
                this.Rows.Add(rownode_categoryRow);
                return rownode_categoryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryRow FindByndc_id(int ndc_id) {
                return ((node_categoryRow)(this.Rows.Find(new object[] {
                            ndc_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                node_categoryDataTable cln = ((node_categoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new node_categoryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnndc_id = base.Columns["ndc_id"];
                this.columnndc_name = base.Columns["ndc_name"];
                this.columnndc_description = base.Columns["ndc_description"];
                this.columnndc_active = base.Columns["ndc_active"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnndc_id = new System.Data.DataColumn("ndc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndc_id);
                this.columnndc_name = new System.Data.DataColumn("ndc_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndc_name);
                this.columnndc_description = new System.Data.DataColumn("ndc_description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndc_description);
                this.columnndc_active = new System.Data.DataColumn("ndc_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndc_active);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnndc_id}, true));
                this.columnndc_id.AutoIncrement = true;
                this.columnndc_id.AllowDBNull = false;
                this.columnndc_id.ReadOnly = true;
                this.columnndc_id.Unique = true;
                this.columnndc_name.MaxLength = 50;
                this.columnndc_description.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryRow Newnode_categoryRow() {
                return ((node_categoryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new node_categoryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(node_categoryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.node_categoryRowChanged != null)) {
                    this.node_categoryRowChanged(this, new node_categoryRowChangeEvent(((node_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.node_categoryRowChanging != null)) {
                    this.node_categoryRowChanging(this, new node_categoryRowChangeEvent(((node_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.node_categoryRowDeleted != null)) {
                    this.node_categoryRowDeleted(this, new node_categoryRowChangeEvent(((node_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.node_categoryRowDeleting != null)) {
                    this.node_categoryRowDeleting(this, new node_categoryRowChangeEvent(((node_categoryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removenode_categoryRow(node_categoryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "node_categoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class node_modelDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnndm_id;
            
            private System.Data.DataColumn columnndc_id;
            
            private System.Data.DataColumn columnndm_version;
            
            private System.Data.DataColumn columnndm_brand;
            
            private System.Data.DataColumn columnndm_active;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelDataTable() {
                this.TableName = "node_model";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal node_modelDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected node_modelDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndm_idColumn {
                get {
                    return this.columnndm_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndc_idColumn {
                get {
                    return this.columnndc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndm_versionColumn {
                get {
                    return this.columnndm_version;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndm_brandColumn {
                get {
                    return this.columnndm_brand;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ndm_activeColumn {
                get {
                    return this.columnndm_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRow this[int index] {
                get {
                    return ((node_modelRow)(this.Rows[index]));
                }
            }
            
            public event node_modelRowChangeEventHandler node_modelRowChanging;
            
            public event node_modelRowChangeEventHandler node_modelRowChanged;
            
            public event node_modelRowChangeEventHandler node_modelRowDeleting;
            
            public event node_modelRowChangeEventHandler node_modelRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addnode_modelRow(node_modelRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRow Addnode_modelRow(node_categoryRow parentnode_categoryRowByFK_node_model_node_category, string ndm_version, string ndm_brand, bool ndm_active) {
                node_modelRow rownode_modelRow = ((node_modelRow)(this.NewRow()));
                rownode_modelRow.ItemArray = new object[] {
                        null,
                        parentnode_categoryRowByFK_node_model_node_category[0],
                        ndm_version,
                        ndm_brand,
                        ndm_active};
                this.Rows.Add(rownode_modelRow);
                return rownode_modelRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRow FindByndm_id(int ndm_id) {
                return ((node_modelRow)(this.Rows.Find(new object[] {
                            ndm_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                node_modelDataTable cln = ((node_modelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new node_modelDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnndm_id = base.Columns["ndm_id"];
                this.columnndc_id = base.Columns["ndc_id"];
                this.columnndm_version = base.Columns["ndm_version"];
                this.columnndm_brand = base.Columns["ndm_brand"];
                this.columnndm_active = base.Columns["ndm_active"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnndm_id = new System.Data.DataColumn("ndm_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndm_id);
                this.columnndc_id = new System.Data.DataColumn("ndc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndc_id);
                this.columnndm_version = new System.Data.DataColumn("ndm_version", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndm_version);
                this.columnndm_brand = new System.Data.DataColumn("ndm_brand", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndm_brand);
                this.columnndm_active = new System.Data.DataColumn("ndm_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnndm_active);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnndm_id}, true));
                this.columnndm_id.AutoIncrement = true;
                this.columnndm_id.AllowDBNull = false;
                this.columnndm_id.ReadOnly = true;
                this.columnndm_id.Unique = true;
                this.columnndm_version.MaxLength = 50;
                this.columnndm_brand.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRow Newnode_modelRow() {
                return ((node_modelRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new node_modelRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(node_modelRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.node_modelRowChanged != null)) {
                    this.node_modelRowChanged(this, new node_modelRowChangeEvent(((node_modelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.node_modelRowChanging != null)) {
                    this.node_modelRowChanging(this, new node_modelRowChangeEvent(((node_modelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.node_modelRowDeleted != null)) {
                    this.node_modelRowDeleted(this, new node_modelRowChangeEvent(((node_modelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.node_modelRowDeleting != null)) {
                    this.node_modelRowDeleting(this, new node_modelRowChangeEvent(((node_modelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removenode_modelRow(node_modelRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "node_modelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class personDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnprs_id;
            
            private System.Data.DataColumn columnprs_firstname;
            
            private System.Data.DataColumn columnprs_middlename;
            
            private System.Data.DataColumn columnprs_lastname;
            
            private System.Data.DataColumn columnprs_active;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personDataTable() {
                this.TableName = "person";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected personDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_idColumn {
                get {
                    return this.columnprs_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_firstnameColumn {
                get {
                    return this.columnprs_firstname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_middlenameColumn {
                get {
                    return this.columnprs_middlename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_lastnameColumn {
                get {
                    return this.columnprs_lastname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_activeColumn {
                get {
                    return this.columnprs_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow this[int index] {
                get {
                    return ((personRow)(this.Rows[index]));
                }
            }
            
            public event personRowChangeEventHandler personRowChanging;
            
            public event personRowChangeEventHandler personRowChanged;
            
            public event personRowChangeEventHandler personRowDeleting;
            
            public event personRowChangeEventHandler personRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpersonRow(personRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow AddpersonRow(string prs_firstname, string prs_middlename, string prs_lastname, bool prs_active) {
                personRow rowpersonRow = ((personRow)(this.NewRow()));
                rowpersonRow.ItemArray = new object[] {
                        null,
                        prs_firstname,
                        prs_middlename,
                        prs_lastname,
                        prs_active};
                this.Rows.Add(rowpersonRow);
                return rowpersonRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow FindByprs_id(int prs_id) {
                return ((personRow)(this.Rows.Find(new object[] {
                            prs_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                personDataTable cln = ((personDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new personDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprs_id = base.Columns["prs_id"];
                this.columnprs_firstname = base.Columns["prs_firstname"];
                this.columnprs_middlename = base.Columns["prs_middlename"];
                this.columnprs_lastname = base.Columns["prs_lastname"];
                this.columnprs_active = base.Columns["prs_active"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprs_id = new System.Data.DataColumn("prs_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_id);
                this.columnprs_firstname = new System.Data.DataColumn("prs_firstname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_firstname);
                this.columnprs_middlename = new System.Data.DataColumn("prs_middlename", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_middlename);
                this.columnprs_lastname = new System.Data.DataColumn("prs_lastname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_lastname);
                this.columnprs_active = new System.Data.DataColumn("prs_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_active);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnprs_id}, true));
                this.columnprs_id.AutoIncrement = true;
                this.columnprs_id.AllowDBNull = false;
                this.columnprs_id.ReadOnly = true;
                this.columnprs_id.Unique = true;
                this.columnprs_firstname.MaxLength = 50;
                this.columnprs_middlename.MaxLength = 50;
                this.columnprs_lastname.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow NewpersonRow() {
                return ((personRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new personRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(personRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.personRowChanged != null)) {
                    this.personRowChanged(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.personRowChanging != null)) {
                    this.personRowChanging(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.personRowDeleted != null)) {
                    this.personRowDeleted(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.personRowDeleting != null)) {
                    this.personRowDeleting(this, new personRowChangeEvent(((personRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepersonRow(personRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "personDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class person_groupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnpsg_id;
            
            private System.Data.DataColumn columnpsg_name;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupDataTable() {
                this.TableName = "person_group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_groupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected person_groupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn psg_idColumn {
                get {
                    return this.columnpsg_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn psg_nameColumn {
                get {
                    return this.columnpsg_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow this[int index] {
                get {
                    return ((person_groupRow)(this.Rows[index]));
                }
            }
            
            public event person_groupRowChangeEventHandler person_groupRowChanging;
            
            public event person_groupRowChangeEventHandler person_groupRowChanged;
            
            public event person_groupRowChangeEventHandler person_groupRowDeleting;
            
            public event person_groupRowChangeEventHandler person_groupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addperson_groupRow(person_groupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow Addperson_groupRow(string psg_name) {
                person_groupRow rowperson_groupRow = ((person_groupRow)(this.NewRow()));
                rowperson_groupRow.ItemArray = new object[] {
                        null,
                        psg_name};
                this.Rows.Add(rowperson_groupRow);
                return rowperson_groupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow FindBypsg_id(int psg_id) {
                return ((person_groupRow)(this.Rows.Find(new object[] {
                            psg_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                person_groupDataTable cln = ((person_groupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new person_groupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpsg_id = base.Columns["psg_id"];
                this.columnpsg_name = base.Columns["psg_name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpsg_id = new System.Data.DataColumn("psg_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpsg_id);
                this.columnpsg_name = new System.Data.DataColumn("psg_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpsg_name);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnpsg_id}, true));
                this.columnpsg_id.AutoIncrement = true;
                this.columnpsg_id.AllowDBNull = false;
                this.columnpsg_id.ReadOnly = true;
                this.columnpsg_id.Unique = true;
                this.columnpsg_name.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow Newperson_groupRow() {
                return ((person_groupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new person_groupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(person_groupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.person_groupRowChanged != null)) {
                    this.person_groupRowChanged(this, new person_groupRowChangeEvent(((person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.person_groupRowChanging != null)) {
                    this.person_groupRowChanging(this, new person_groupRowChangeEvent(((person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.person_groupRowDeleted != null)) {
                    this.person_groupRowDeleted(this, new person_groupRowChangeEvent(((person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.person_groupRowDeleting != null)) {
                    this.person_groupRowDeleting(this, new person_groupRowChangeEvent(((person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeperson_groupRow(person_groupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "person_groupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class person_has_person_groupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnprs_id;
            
            private System.Data.DataColumn columnpsg_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupDataTable() {
                this.TableName = "person_has_person_group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_has_person_groupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected person_has_person_groupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_idColumn {
                get {
                    return this.columnprs_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn psg_idColumn {
                get {
                    return this.columnpsg_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRow this[int index] {
                get {
                    return ((person_has_person_groupRow)(this.Rows[index]));
                }
            }
            
            public event person_has_person_groupRowChangeEventHandler person_has_person_groupRowChanging;
            
            public event person_has_person_groupRowChangeEventHandler person_has_person_groupRowChanged;
            
            public event person_has_person_groupRowChangeEventHandler person_has_person_groupRowDeleting;
            
            public event person_has_person_groupRowChangeEventHandler person_has_person_groupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addperson_has_person_groupRow(person_has_person_groupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRow Addperson_has_person_groupRow(personRow parentpersonRowByFK_person_has_person_group_person, person_groupRow parentperson_groupRowByFK_person_has_person_group_person_group) {
                person_has_person_groupRow rowperson_has_person_groupRow = ((person_has_person_groupRow)(this.NewRow()));
                rowperson_has_person_groupRow.ItemArray = new object[] {
                        parentpersonRowByFK_person_has_person_group_person[0],
                        parentperson_groupRowByFK_person_has_person_group_person_group[0]};
                this.Rows.Add(rowperson_has_person_groupRow);
                return rowperson_has_person_groupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRow FindByprs_idpsg_id(int prs_id, int psg_id) {
                return ((person_has_person_groupRow)(this.Rows.Find(new object[] {
                            prs_id,
                            psg_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                person_has_person_groupDataTable cln = ((person_has_person_groupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new person_has_person_groupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprs_id = base.Columns["prs_id"];
                this.columnpsg_id = base.Columns["psg_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprs_id = new System.Data.DataColumn("prs_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_id);
                this.columnpsg_id = new System.Data.DataColumn("psg_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpsg_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnprs_id,
                                this.columnpsg_id}, true));
                this.columnprs_id.AllowDBNull = false;
                this.columnpsg_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRow Newperson_has_person_groupRow() {
                return ((person_has_person_groupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new person_has_person_groupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(person_has_person_groupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.person_has_person_groupRowChanged != null)) {
                    this.person_has_person_groupRowChanged(this, new person_has_person_groupRowChangeEvent(((person_has_person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.person_has_person_groupRowChanging != null)) {
                    this.person_has_person_groupRowChanging(this, new person_has_person_groupRowChangeEvent(((person_has_person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.person_has_person_groupRowDeleted != null)) {
                    this.person_has_person_groupRowDeleted(this, new person_has_person_groupRowChangeEvent(((person_has_person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.person_has_person_groupRowDeleting != null)) {
                    this.person_has_person_groupRowDeleting(this, new person_has_person_groupRowChangeEvent(((person_has_person_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeperson_has_person_groupRow(person_has_person_groupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "person_has_person_groupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class systemclientDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsmc_id;
            
            private System.Data.DataColumn columnsmc_name;
            
            private System.Data.DataColumn columnsmc_ip;
            
            private System.Data.DataColumn columnsmc_remark;
            
            private System.Data.DataColumn columnsmc_active;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientDataTable() {
                this.TableName = "systemclient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal systemclientDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected systemclientDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn smc_idColumn {
                get {
                    return this.columnsmc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn smc_nameColumn {
                get {
                    return this.columnsmc_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn smc_ipColumn {
                get {
                    return this.columnsmc_ip;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn smc_remarkColumn {
                get {
                    return this.columnsmc_remark;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn smc_activeColumn {
                get {
                    return this.columnsmc_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientRow this[int index] {
                get {
                    return ((systemclientRow)(this.Rows[index]));
                }
            }
            
            public event systemclientRowChangeEventHandler systemclientRowChanging;
            
            public event systemclientRowChangeEventHandler systemclientRowChanged;
            
            public event systemclientRowChangeEventHandler systemclientRowDeleting;
            
            public event systemclientRowChangeEventHandler systemclientRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsystemclientRow(systemclientRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientRow AddsystemclientRow(string smc_name, string smc_ip, string smc_remark, bool smc_active) {
                systemclientRow rowsystemclientRow = ((systemclientRow)(this.NewRow()));
                rowsystemclientRow.ItemArray = new object[] {
                        null,
                        smc_name,
                        smc_ip,
                        smc_remark,
                        smc_active};
                this.Rows.Add(rowsystemclientRow);
                return rowsystemclientRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientRow FindBysmc_id(int smc_id) {
                return ((systemclientRow)(this.Rows.Find(new object[] {
                            smc_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                systemclientDataTable cln = ((systemclientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new systemclientDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsmc_id = base.Columns["smc_id"];
                this.columnsmc_name = base.Columns["smc_name"];
                this.columnsmc_ip = base.Columns["smc_ip"];
                this.columnsmc_remark = base.Columns["smc_remark"];
                this.columnsmc_active = base.Columns["smc_active"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsmc_id = new System.Data.DataColumn("smc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsmc_id);
                this.columnsmc_name = new System.Data.DataColumn("smc_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsmc_name);
                this.columnsmc_ip = new System.Data.DataColumn("smc_ip", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsmc_ip);
                this.columnsmc_remark = new System.Data.DataColumn("smc_remark", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsmc_remark);
                this.columnsmc_active = new System.Data.DataColumn("smc_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsmc_active);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnsmc_id}, true));
                this.columnsmc_id.AutoIncrement = true;
                this.columnsmc_id.AllowDBNull = false;
                this.columnsmc_id.ReadOnly = true;
                this.columnsmc_id.Unique = true;
                this.columnsmc_name.MaxLength = 50;
                this.columnsmc_ip.AllowDBNull = false;
                this.columnsmc_ip.MaxLength = 50;
                this.columnsmc_remark.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientRow NewsystemclientRow() {
                return ((systemclientRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new systemclientRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(systemclientRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.systemclientRowChanged != null)) {
                    this.systemclientRowChanged(this, new systemclientRowChangeEvent(((systemclientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.systemclientRowChanging != null)) {
                    this.systemclientRowChanging(this, new systemclientRowChangeEvent(((systemclientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.systemclientRowDeleted != null)) {
                    this.systemclientRowDeleted(this, new systemclientRowChangeEvent(((systemclientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.systemclientRowDeleting != null)) {
                    this.systemclientRowDeleting(this, new systemclientRowChangeEvent(((systemclientRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesystemclientRow(systemclientRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "systemclientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class systemuserDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnprs_id;
            
            private System.Data.DataColumn columnstu_loginname;
            
            private System.Data.DataColumn columnstu_password;
            
            private System.Data.DataColumn columnstu_active;
            
            private System.Data.DataColumn columnstu_lastlogin;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserDataTable() {
                this.TableName = "systemuser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal systemuserDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected systemuserDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_idColumn {
                get {
                    return this.columnprs_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stu_loginnameColumn {
                get {
                    return this.columnstu_loginname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stu_passwordColumn {
                get {
                    return this.columnstu_password;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stu_activeColumn {
                get {
                    return this.columnstu_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stu_lastloginColumn {
                get {
                    return this.columnstu_lastlogin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserRow this[int index] {
                get {
                    return ((systemuserRow)(this.Rows[index]));
                }
            }
            
            public event systemuserRowChangeEventHandler systemuserRowChanging;
            
            public event systemuserRowChangeEventHandler systemuserRowChanged;
            
            public event systemuserRowChangeEventHandler systemuserRowDeleting;
            
            public event systemuserRowChangeEventHandler systemuserRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsystemuserRow(systemuserRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserRow AddsystemuserRow(personRow parentpersonRowByFK_systemuser_person, string stu_loginname, string stu_password, bool stu_active, byte[] stu_lastlogin) {
                systemuserRow rowsystemuserRow = ((systemuserRow)(this.NewRow()));
                rowsystemuserRow.ItemArray = new object[] {
                        parentpersonRowByFK_systemuser_person[0],
                        stu_loginname,
                        stu_password,
                        stu_active,
                        stu_lastlogin};
                this.Rows.Add(rowsystemuserRow);
                return rowsystemuserRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserRow FindByprs_id(int prs_id) {
                return ((systemuserRow)(this.Rows.Find(new object[] {
                            prs_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                systemuserDataTable cln = ((systemuserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new systemuserDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprs_id = base.Columns["prs_id"];
                this.columnstu_loginname = base.Columns["stu_loginname"];
                this.columnstu_password = base.Columns["stu_password"];
                this.columnstu_active = base.Columns["stu_active"];
                this.columnstu_lastlogin = base.Columns["stu_lastlogin"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprs_id = new System.Data.DataColumn("prs_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_id);
                this.columnstu_loginname = new System.Data.DataColumn("stu_loginname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstu_loginname);
                this.columnstu_password = new System.Data.DataColumn("stu_password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstu_password);
                this.columnstu_active = new System.Data.DataColumn("stu_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstu_active);
                this.columnstu_lastlogin = new System.Data.DataColumn("stu_lastlogin", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstu_lastlogin);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnprs_id}, true));
                this.columnprs_id.AllowDBNull = false;
                this.columnprs_id.Unique = true;
                this.columnstu_loginname.MaxLength = 20;
                this.columnstu_password.MaxLength = 20;
                this.columnstu_lastlogin.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserRow NewsystemuserRow() {
                return ((systemuserRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new systemuserRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(systemuserRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.systemuserRowChanged != null)) {
                    this.systemuserRowChanged(this, new systemuserRowChangeEvent(((systemuserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.systemuserRowChanging != null)) {
                    this.systemuserRowChanging(this, new systemuserRowChangeEvent(((systemuserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.systemuserRowDeleted != null)) {
                    this.systemuserRowDeleted(this, new systemuserRowChangeEvent(((systemuserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.systemuserRowDeleting != null)) {
                    this.systemuserRowDeleting(this, new systemuserRowChangeEvent(((systemuserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesystemuserRow(systemuserRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "systemuserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class zoneDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnzne_id;
            
            private System.Data.DataColumn columnzne_name;
            
            private System.Data.DataColumn columnzne_remark;
            
            private System.Data.DataColumn columnzne_plan;
            
            private System.Data.DataColumn columnzne_active;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneDataTable() {
                this.TableName = "zone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal zoneDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected zoneDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_idColumn {
                get {
                    return this.columnzne_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_nameColumn {
                get {
                    return this.columnzne_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_remarkColumn {
                get {
                    return this.columnzne_remark;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_planColumn {
                get {
                    return this.columnzne_plan;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_activeColumn {
                get {
                    return this.columnzne_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow this[int index] {
                get {
                    return ((zoneRow)(this.Rows[index]));
                }
            }
            
            public event zoneRowChangeEventHandler zoneRowChanging;
            
            public event zoneRowChangeEventHandler zoneRowChanged;
            
            public event zoneRowChangeEventHandler zoneRowDeleting;
            
            public event zoneRowChangeEventHandler zoneRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddzoneRow(zoneRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow AddzoneRow(string zne_name, string zne_remark, byte[] zne_plan, bool zne_active) {
                zoneRow rowzoneRow = ((zoneRow)(this.NewRow()));
                rowzoneRow.ItemArray = new object[] {
                        null,
                        zne_name,
                        zne_remark,
                        zne_plan,
                        zne_active};
                this.Rows.Add(rowzoneRow);
                return rowzoneRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow FindByzne_id(int zne_id) {
                return ((zoneRow)(this.Rows.Find(new object[] {
                            zne_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                zoneDataTable cln = ((zoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new zoneDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnzne_id = base.Columns["zne_id"];
                this.columnzne_name = base.Columns["zne_name"];
                this.columnzne_remark = base.Columns["zne_remark"];
                this.columnzne_plan = base.Columns["zne_plan"];
                this.columnzne_active = base.Columns["zne_active"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnzne_id = new System.Data.DataColumn("zne_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_id);
                this.columnzne_name = new System.Data.DataColumn("zne_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_name);
                this.columnzne_remark = new System.Data.DataColumn("zne_remark", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_remark);
                this.columnzne_plan = new System.Data.DataColumn("zne_plan", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_plan);
                this.columnzne_active = new System.Data.DataColumn("zne_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_active);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnzne_id}, true));
                this.columnzne_id.AutoIncrement = true;
                this.columnzne_id.AllowDBNull = false;
                this.columnzne_id.ReadOnly = true;
                this.columnzne_id.Unique = true;
                this.columnzne_name.MaxLength = 50;
                this.columnzne_remark.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow NewzoneRow() {
                return ((zoneRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new zoneRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(zoneRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.zoneRowChanged != null)) {
                    this.zoneRowChanged(this, new zoneRowChangeEvent(((zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.zoneRowChanging != null)) {
                    this.zoneRowChanging(this, new zoneRowChangeEvent(((zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.zoneRowDeleted != null)) {
                    this.zoneRowDeleted(this, new zoneRowChangeEvent(((zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.zoneRowDeleting != null)) {
                    this.zoneRowDeleting(this, new zoneRowChangeEvent(((zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovezoneRow(zoneRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "zoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class entry_controllerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnecn_id;
            
            private System.Data.DataColumn columnecn_name;
            
            private System.Data.DataColumn columnecn_remark;
            
            private System.Data.DataColumn columnecn_ip;
            
            private System.Data.DataColumn columnecn_active;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_controllerDataTable() {
                this.TableName = "entry_controller";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entry_controllerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected entry_controllerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ecn_idColumn {
                get {
                    return this.columnecn_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ecn_nameColumn {
                get {
                    return this.columnecn_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ecn_remarkColumn {
                get {
                    return this.columnecn_remark;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ecn_ipColumn {
                get {
                    return this.columnecn_ip;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ecn_activeColumn {
                get {
                    return this.columnecn_active;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_controllerRow this[int index] {
                get {
                    return ((entry_controllerRow)(this.Rows[index]));
                }
            }
            
            public event entry_controllerRowChangeEventHandler entry_controllerRowChanging;
            
            public event entry_controllerRowChangeEventHandler entry_controllerRowChanged;
            
            public event entry_controllerRowChangeEventHandler entry_controllerRowDeleting;
            
            public event entry_controllerRowChangeEventHandler entry_controllerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addentry_controllerRow(entry_controllerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_controllerRow Addentry_controllerRow(int ecn_id, string ecn_name, string ecn_remark, string ecn_ip, bool ecn_active) {
                entry_controllerRow rowentry_controllerRow = ((entry_controllerRow)(this.NewRow()));
                rowentry_controllerRow.ItemArray = new object[] {
                        ecn_id,
                        ecn_name,
                        ecn_remark,
                        ecn_ip,
                        ecn_active};
                this.Rows.Add(rowentry_controllerRow);
                return rowentry_controllerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_controllerRow FindByecn_id(int ecn_id) {
                return ((entry_controllerRow)(this.Rows.Find(new object[] {
                            ecn_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                entry_controllerDataTable cln = ((entry_controllerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new entry_controllerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnecn_id = base.Columns["ecn_id"];
                this.columnecn_name = base.Columns["ecn_name"];
                this.columnecn_remark = base.Columns["ecn_remark"];
                this.columnecn_ip = base.Columns["ecn_ip"];
                this.columnecn_active = base.Columns["ecn_active"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnecn_id = new System.Data.DataColumn("ecn_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnecn_id);
                this.columnecn_name = new System.Data.DataColumn("ecn_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnecn_name);
                this.columnecn_remark = new System.Data.DataColumn("ecn_remark", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnecn_remark);
                this.columnecn_ip = new System.Data.DataColumn("ecn_ip", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnecn_ip);
                this.columnecn_active = new System.Data.DataColumn("ecn_active", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnecn_active);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnecn_id}, true));
                this.columnecn_id.AllowDBNull = false;
                this.columnecn_id.Unique = true;
                this.columnecn_name.MaxLength = 100;
                this.columnecn_remark.MaxLength = 255;
                this.columnecn_ip.MaxLength = 15;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_controllerRow Newentry_controllerRow() {
                return ((entry_controllerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new entry_controllerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(entry_controllerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.entry_controllerRowChanged != null)) {
                    this.entry_controllerRowChanged(this, new entry_controllerRowChangeEvent(((entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.entry_controllerRowChanging != null)) {
                    this.entry_controllerRowChanging(this, new entry_controllerRowChangeEvent(((entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.entry_controllerRowDeleted != null)) {
                    this.entry_controllerRowDeleted(this, new entry_controllerRowChangeEvent(((entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.entry_controllerRowDeleting != null)) {
                    this.entry_controllerRowDeleting(this, new entry_controllerRowChangeEvent(((entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeentry_controllerRow(entry_controllerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "entry_controllerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class person_has_entryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnprs_id;
            
            private System.Data.DataColumn columnent_id;
            
            private System.Data.DataColumn columnpse_access;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryDataTable() {
                this.TableName = "person_has_entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_has_entryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected person_has_entryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_idColumn {
                get {
                    return this.columnprs_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ent_idColumn {
                get {
                    return this.columnent_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pse_accessColumn {
                get {
                    return this.columnpse_access;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRow this[int index] {
                get {
                    return ((person_has_entryRow)(this.Rows[index]));
                }
            }
            
            public event person_has_entryRowChangeEventHandler person_has_entryRowChanging;
            
            public event person_has_entryRowChangeEventHandler person_has_entryRowChanged;
            
            public event person_has_entryRowChangeEventHandler person_has_entryRowDeleting;
            
            public event person_has_entryRowChangeEventHandler person_has_entryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addperson_has_entryRow(person_has_entryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRow Addperson_has_entryRow(personRow parentpersonRowByFK_person_entry_person1, entryRow parententryRowByFK_person_entry_entry1, bool pse_access) {
                person_has_entryRow rowperson_has_entryRow = ((person_has_entryRow)(this.NewRow()));
                rowperson_has_entryRow.ItemArray = new object[] {
                        parentpersonRowByFK_person_entry_person1[0],
                        parententryRowByFK_person_entry_entry1[0],
                        pse_access};
                this.Rows.Add(rowperson_has_entryRow);
                return rowperson_has_entryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRow FindByprs_ident_id(int prs_id, int ent_id) {
                return ((person_has_entryRow)(this.Rows.Find(new object[] {
                            prs_id,
                            ent_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                person_has_entryDataTable cln = ((person_has_entryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new person_has_entryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprs_id = base.Columns["prs_id"];
                this.columnent_id = base.Columns["ent_id"];
                this.columnpse_access = base.Columns["pse_access"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprs_id = new System.Data.DataColumn("prs_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_id);
                this.columnent_id = new System.Data.DataColumn("ent_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnent_id);
                this.columnpse_access = new System.Data.DataColumn("pse_access", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpse_access);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnprs_id,
                                this.columnent_id}, true));
                this.columnprs_id.AllowDBNull = false;
                this.columnent_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRow Newperson_has_entryRow() {
                return ((person_has_entryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new person_has_entryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(person_has_entryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.person_has_entryRowChanged != null)) {
                    this.person_has_entryRowChanged(this, new person_has_entryRowChangeEvent(((person_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.person_has_entryRowChanging != null)) {
                    this.person_has_entryRowChanging(this, new person_has_entryRowChangeEvent(((person_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.person_has_entryRowDeleted != null)) {
                    this.person_has_entryRowDeleted(this, new person_has_entryRowChangeEvent(((person_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.person_has_entryRowDeleting != null)) {
                    this.person_has_entryRowDeleting(this, new person_has_entryRowChangeEvent(((person_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeperson_has_entryRow(person_has_entryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "person_has_entryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class person_has_zoneDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnprs_id;
            
            private System.Data.DataColumn columnzne_id;
            
            private System.Data.DataColumn columnpsz_access;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneDataTable() {
                this.TableName = "person_has_zone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_has_zoneDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected person_has_zoneDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn prs_idColumn {
                get {
                    return this.columnprs_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_idColumn {
                get {
                    return this.columnzne_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn psz_accessColumn {
                get {
                    return this.columnpsz_access;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRow this[int index] {
                get {
                    return ((person_has_zoneRow)(this.Rows[index]));
                }
            }
            
            public event person_has_zoneRowChangeEventHandler person_has_zoneRowChanging;
            
            public event person_has_zoneRowChangeEventHandler person_has_zoneRowChanged;
            
            public event person_has_zoneRowChangeEventHandler person_has_zoneRowDeleting;
            
            public event person_has_zoneRowChangeEventHandler person_has_zoneRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addperson_has_zoneRow(person_has_zoneRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRow Addperson_has_zoneRow(personRow parentpersonRowByFK_person_zone_person1, zoneRow parentzoneRowByFK_person_zone_zone1, bool psz_access) {
                person_has_zoneRow rowperson_has_zoneRow = ((person_has_zoneRow)(this.NewRow()));
                rowperson_has_zoneRow.ItemArray = new object[] {
                        parentpersonRowByFK_person_zone_person1[0],
                        parentzoneRowByFK_person_zone_zone1[0],
                        psz_access};
                this.Rows.Add(rowperson_has_zoneRow);
                return rowperson_has_zoneRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRow FindByprs_idzne_id(int prs_id, int zne_id) {
                return ((person_has_zoneRow)(this.Rows.Find(new object[] {
                            prs_id,
                            zne_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                person_has_zoneDataTable cln = ((person_has_zoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new person_has_zoneDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprs_id = base.Columns["prs_id"];
                this.columnzne_id = base.Columns["zne_id"];
                this.columnpsz_access = base.Columns["psz_access"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprs_id = new System.Data.DataColumn("prs_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprs_id);
                this.columnzne_id = new System.Data.DataColumn("zne_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_id);
                this.columnpsz_access = new System.Data.DataColumn("psz_access", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpsz_access);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnprs_id,
                                this.columnzne_id}, true));
                this.columnprs_id.AllowDBNull = false;
                this.columnzne_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRow Newperson_has_zoneRow() {
                return ((person_has_zoneRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new person_has_zoneRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(person_has_zoneRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.person_has_zoneRowChanged != null)) {
                    this.person_has_zoneRowChanged(this, new person_has_zoneRowChangeEvent(((person_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.person_has_zoneRowChanging != null)) {
                    this.person_has_zoneRowChanging(this, new person_has_zoneRowChangeEvent(((person_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.person_has_zoneRowDeleted != null)) {
                    this.person_has_zoneRowDeleted(this, new person_has_zoneRowChangeEvent(((person_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.person_has_zoneRowDeleting != null)) {
                    this.person_has_zoneRowDeleting(this, new person_has_zoneRowChangeEvent(((person_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeperson_has_zoneRow(person_has_zoneRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "person_has_zoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class persongroup_has_entryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnpsg_id;
            
            private System.Data.DataColumn columnent_id;
            
            private System.Data.DataColumn columnpge_access;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryDataTable() {
                this.TableName = "persongroup_has_entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal persongroup_has_entryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected persongroup_has_entryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn psg_idColumn {
                get {
                    return this.columnpsg_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ent_idColumn {
                get {
                    return this.columnent_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pge_accessColumn {
                get {
                    return this.columnpge_access;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRow this[int index] {
                get {
                    return ((persongroup_has_entryRow)(this.Rows[index]));
                }
            }
            
            public event persongroup_has_entryRowChangeEventHandler persongroup_has_entryRowChanging;
            
            public event persongroup_has_entryRowChangeEventHandler persongroup_has_entryRowChanged;
            
            public event persongroup_has_entryRowChangeEventHandler persongroup_has_entryRowDeleting;
            
            public event persongroup_has_entryRowChangeEventHandler persongroup_has_entryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpersongroup_has_entryRow(persongroup_has_entryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRow Addpersongroup_has_entryRow(person_groupRow parentperson_groupRowByFK_persongroup_entry_person_group1, entryRow parententryRowByFK_persongroup_entry_entry1, bool pge_access) {
                persongroup_has_entryRow rowpersongroup_has_entryRow = ((persongroup_has_entryRow)(this.NewRow()));
                rowpersongroup_has_entryRow.ItemArray = new object[] {
                        parentperson_groupRowByFK_persongroup_entry_person_group1[0],
                        parententryRowByFK_persongroup_entry_entry1[0],
                        pge_access};
                this.Rows.Add(rowpersongroup_has_entryRow);
                return rowpersongroup_has_entryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRow FindBypsg_ident_id(int psg_id, int ent_id) {
                return ((persongroup_has_entryRow)(this.Rows.Find(new object[] {
                            psg_id,
                            ent_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                persongroup_has_entryDataTable cln = ((persongroup_has_entryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new persongroup_has_entryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpsg_id = base.Columns["psg_id"];
                this.columnent_id = base.Columns["ent_id"];
                this.columnpge_access = base.Columns["pge_access"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpsg_id = new System.Data.DataColumn("psg_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpsg_id);
                this.columnent_id = new System.Data.DataColumn("ent_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnent_id);
                this.columnpge_access = new System.Data.DataColumn("pge_access", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpge_access);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnpsg_id,
                                this.columnent_id}, true));
                this.columnpsg_id.AllowDBNull = false;
                this.columnent_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRow Newpersongroup_has_entryRow() {
                return ((persongroup_has_entryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new persongroup_has_entryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(persongroup_has_entryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.persongroup_has_entryRowChanged != null)) {
                    this.persongroup_has_entryRowChanged(this, new persongroup_has_entryRowChangeEvent(((persongroup_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.persongroup_has_entryRowChanging != null)) {
                    this.persongroup_has_entryRowChanging(this, new persongroup_has_entryRowChangeEvent(((persongroup_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.persongroup_has_entryRowDeleted != null)) {
                    this.persongroup_has_entryRowDeleted(this, new persongroup_has_entryRowChangeEvent(((persongroup_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.persongroup_has_entryRowDeleting != null)) {
                    this.persongroup_has_entryRowDeleting(this, new persongroup_has_entryRowChangeEvent(((persongroup_has_entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepersongroup_has_entryRow(persongroup_has_entryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "persongroup_has_entryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class persongroup_has_zoneDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnpsg_id;
            
            private System.Data.DataColumn columnzne_id;
            
            private System.Data.DataColumn columnpgz_access;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneDataTable() {
                this.TableName = "persongroup_has_zone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal persongroup_has_zoneDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected persongroup_has_zoneDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn psg_idColumn {
                get {
                    return this.columnpsg_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zne_idColumn {
                get {
                    return this.columnzne_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pgz_accessColumn {
                get {
                    return this.columnpgz_access;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRow this[int index] {
                get {
                    return ((persongroup_has_zoneRow)(this.Rows[index]));
                }
            }
            
            public event persongroup_has_zoneRowChangeEventHandler persongroup_has_zoneRowChanging;
            
            public event persongroup_has_zoneRowChangeEventHandler persongroup_has_zoneRowChanged;
            
            public event persongroup_has_zoneRowChangeEventHandler persongroup_has_zoneRowDeleting;
            
            public event persongroup_has_zoneRowChangeEventHandler persongroup_has_zoneRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpersongroup_has_zoneRow(persongroup_has_zoneRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRow Addpersongroup_has_zoneRow(person_groupRow parentperson_groupRowByFK_persongroup_zone_person_group1, zoneRow parentzoneRowByFK_persongroup_zone_zone1, bool pgz_access) {
                persongroup_has_zoneRow rowpersongroup_has_zoneRow = ((persongroup_has_zoneRow)(this.NewRow()));
                rowpersongroup_has_zoneRow.ItemArray = new object[] {
                        parentperson_groupRowByFK_persongroup_zone_person_group1[0],
                        parentzoneRowByFK_persongroup_zone_zone1[0],
                        pgz_access};
                this.Rows.Add(rowpersongroup_has_zoneRow);
                return rowpersongroup_has_zoneRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRow FindBypsg_idzne_id(int psg_id, int zne_id) {
                return ((persongroup_has_zoneRow)(this.Rows.Find(new object[] {
                            psg_id,
                            zne_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                persongroup_has_zoneDataTable cln = ((persongroup_has_zoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new persongroup_has_zoneDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpsg_id = base.Columns["psg_id"];
                this.columnzne_id = base.Columns["zne_id"];
                this.columnpgz_access = base.Columns["pgz_access"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpsg_id = new System.Data.DataColumn("psg_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpsg_id);
                this.columnzne_id = new System.Data.DataColumn("zne_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzne_id);
                this.columnpgz_access = new System.Data.DataColumn("pgz_access", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpgz_access);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnpsg_id,
                                this.columnzne_id}, true));
                this.columnpsg_id.AllowDBNull = false;
                this.columnzne_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRow Newpersongroup_has_zoneRow() {
                return ((persongroup_has_zoneRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new persongroup_has_zoneRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(persongroup_has_zoneRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.persongroup_has_zoneRowChanged != null)) {
                    this.persongroup_has_zoneRowChanged(this, new persongroup_has_zoneRowChangeEvent(((persongroup_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.persongroup_has_zoneRowChanging != null)) {
                    this.persongroup_has_zoneRowChanging(this, new persongroup_has_zoneRowChangeEvent(((persongroup_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.persongroup_has_zoneRowDeleted != null)) {
                    this.persongroup_has_zoneRowDeleted(this, new persongroup_has_zoneRowChangeEvent(((persongroup_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.persongroup_has_zoneRowDeleting != null)) {
                    this.persongroup_has_zoneRowDeleting(this, new persongroup_has_zoneRowChangeEvent(((persongroup_has_zoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepersongroup_has_zoneRow(persongroup_has_zoneRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "persongroup_has_zoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class log_entry_controllerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlgc_id;
            
            private System.Data.DataColumn columnlgc_ent_id;
            
            private System.Data.DataColumn columnlgc_nde_id;
            
            private System.Data.DataColumn columnlgc_prs_id;
            
            private System.Data.DataColumn columnlgc_powered;
            
            private System.Data.DataColumn columnlgc_datetime;
            
            private System.Data.DataColumn columnlgc_comment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerDataTable() {
                this.TableName = "log_entry_controller";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal log_entry_controllerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected log_entry_controllerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lgc_idColumn {
                get {
                    return this.columnlgc_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lgc_ent_idColumn {
                get {
                    return this.columnlgc_ent_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lgc_nde_idColumn {
                get {
                    return this.columnlgc_nde_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lgc_prs_idColumn {
                get {
                    return this.columnlgc_prs_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lgc_poweredColumn {
                get {
                    return this.columnlgc_powered;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lgc_datetimeColumn {
                get {
                    return this.columnlgc_datetime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lgc_commentColumn {
                get {
                    return this.columnlgc_comment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerRow this[int index] {
                get {
                    return ((log_entry_controllerRow)(this.Rows[index]));
                }
            }
            
            public event log_entry_controllerRowChangeEventHandler log_entry_controllerRowChanging;
            
            public event log_entry_controllerRowChangeEventHandler log_entry_controllerRowChanged;
            
            public event log_entry_controllerRowChangeEventHandler log_entry_controllerRowDeleting;
            
            public event log_entry_controllerRowChangeEventHandler log_entry_controllerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addlog_entry_controllerRow(log_entry_controllerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerRow Addlog_entry_controllerRow(entryRow parententryRowByFK_log_entry_controller_entry, int lgc_nde_id, int lgc_prs_id, bool lgc_powered, System.DateTime lgc_datetime, string lgc_comment) {
                log_entry_controllerRow rowlog_entry_controllerRow = ((log_entry_controllerRow)(this.NewRow()));
                rowlog_entry_controllerRow.ItemArray = new object[] {
                        null,
                        parententryRowByFK_log_entry_controller_entry[0],
                        lgc_nde_id,
                        lgc_prs_id,
                        lgc_powered,
                        lgc_datetime,
                        lgc_comment};
                this.Rows.Add(rowlog_entry_controllerRow);
                return rowlog_entry_controllerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerRow FindBylgc_id(int lgc_id) {
                return ((log_entry_controllerRow)(this.Rows.Find(new object[] {
                            lgc_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                log_entry_controllerDataTable cln = ((log_entry_controllerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new log_entry_controllerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlgc_id = base.Columns["lgc_id"];
                this.columnlgc_ent_id = base.Columns["lgc_ent_id"];
                this.columnlgc_nde_id = base.Columns["lgc_nde_id"];
                this.columnlgc_prs_id = base.Columns["lgc_prs_id"];
                this.columnlgc_powered = base.Columns["lgc_powered"];
                this.columnlgc_datetime = base.Columns["lgc_datetime"];
                this.columnlgc_comment = base.Columns["lgc_comment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlgc_id = new System.Data.DataColumn("lgc_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlgc_id);
                this.columnlgc_ent_id = new System.Data.DataColumn("lgc_ent_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlgc_ent_id);
                this.columnlgc_nde_id = new System.Data.DataColumn("lgc_nde_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlgc_nde_id);
                this.columnlgc_prs_id = new System.Data.DataColumn("lgc_prs_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlgc_prs_id);
                this.columnlgc_powered = new System.Data.DataColumn("lgc_powered", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlgc_powered);
                this.columnlgc_datetime = new System.Data.DataColumn("lgc_datetime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlgc_datetime);
                this.columnlgc_comment = new System.Data.DataColumn("lgc_comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlgc_comment);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnlgc_id}, true));
                this.columnlgc_id.AutoIncrement = true;
                this.columnlgc_id.AllowDBNull = false;
                this.columnlgc_id.ReadOnly = true;
                this.columnlgc_id.Unique = true;
                this.columnlgc_ent_id.AllowDBNull = false;
                this.columnlgc_prs_id.AllowDBNull = false;
                this.columnlgc_powered.AllowDBNull = false;
                this.columnlgc_datetime.AllowDBNull = false;
                this.columnlgc_comment.AllowDBNull = false;
                this.columnlgc_comment.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerRow Newlog_entry_controllerRow() {
                return ((log_entry_controllerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new log_entry_controllerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(log_entry_controllerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.log_entry_controllerRowChanged != null)) {
                    this.log_entry_controllerRowChanged(this, new log_entry_controllerRowChangeEvent(((log_entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.log_entry_controllerRowChanging != null)) {
                    this.log_entry_controllerRowChanging(this, new log_entry_controllerRowChangeEvent(((log_entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.log_entry_controllerRowDeleted != null)) {
                    this.log_entry_controllerRowDeleted(this, new log_entry_controllerRowChangeEvent(((log_entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.log_entry_controllerRowDeleting != null)) {
                    this.log_entry_controllerRowDeleting(this, new log_entry_controllerRowChangeEvent(((log_entry_controllerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removelog_entry_controllerRow(log_entry_controllerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FlexAccessServerDataSet ds = new FlexAccessServerDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "log_entry_controllerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class entryRow : System.Data.DataRow {
            
            private entryDataTable tableentry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableentry = ((entryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ent_id {
                get {
                    return ((int)(this[this.tableentry.ent_idColumn]));
                }
                set {
                    this[this.tableentry.ent_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int enc_id {
                get {
                    try {
                        return ((int)(this[this.tableentry.enc_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enc_id\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.enc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ent_active {
                get {
                    try {
                        return ((bool)(this[this.tableentry.ent_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ent_active\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.ent_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int zne_id {
                get {
                    try {
                        return ((int)(this[this.tableentry.zne_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'zne_id\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.zne_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ecn_id {
                get {
                    try {
                        return ((int)(this[this.tableentry.ecn_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ecn_id\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.ecn_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ecn_port_number {
                get {
                    try {
                        return ((int)(this[this.tableentry.ecn_port_numberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ecn_port_number\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.ecn_port_numberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool enc_powered {
                get {
                    try {
                        return ((bool)(this[this.tableentry.enc_poweredColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enc_powered\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.enc_poweredColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ent_name {
                get {
                    try {
                        return ((string)(this[this.tableentry.ent_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ent_name\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.ent_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ent_remark {
                get {
                    try {
                        return ((string)(this[this.tableentry.ent_remarkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ent_remark\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.ent_remarkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryRow entry_categoryRow {
                get {
                    return ((entry_categoryRow)(this.GetParentRow(this.Table.ParentRelations["FK_entry_entry_category"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_entry_entry_category"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow zoneRow {
                get {
                    return ((zoneRow)(this.GetParentRow(this.Table.ParentRelations["FK_entry_zone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_entry_zone"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isenc_idNull() {
                return this.IsNull(this.tableentry.enc_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setenc_idNull() {
                this[this.tableentry.enc_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isent_activeNull() {
                return this.IsNull(this.tableentry.ent_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setent_activeNull() {
                this[this.tableentry.ent_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszne_idNull() {
                return this.IsNull(this.tableentry.zne_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzne_idNull() {
                this[this.tableentry.zne_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isecn_idNull() {
                return this.IsNull(this.tableentry.ecn_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setecn_idNull() {
                this[this.tableentry.ecn_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isecn_port_numberNull() {
                return this.IsNull(this.tableentry.ecn_port_numberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setecn_port_numberNull() {
                this[this.tableentry.ecn_port_numberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isenc_poweredNull() {
                return this.IsNull(this.tableentry.enc_poweredColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setenc_poweredNull() {
                this[this.tableentry.enc_poweredColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isent_nameNull() {
                return this.IsNull(this.tableentry.ent_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setent_nameNull() {
                this[this.tableentry.ent_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isent_remarkNull() {
                return this.IsNull(this.tableentry.ent_remarkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setent_remarkNull() {
                this[this.tableentry.ent_remarkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow[] Getnde_ent_smc_linkRows() {
                return ((nde_ent_smc_linkRow[])(base.GetChildRows(this.Table.ChildRelations["FK_nde_ent_smc_link_entry"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRow[] Getperson_has_entryRows() {
                return ((person_has_entryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_person_entry_entry1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRow[] Getpersongroup_has_entryRows() {
                return ((persongroup_has_entryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_persongroup_entry_entry1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerRow[] Getlog_entry_controllerRows() {
                return ((log_entry_controllerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_log_entry_controller_entry"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class entry_categoryRow : System.Data.DataRow {
            
            private entry_categoryDataTable tableentry_category;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entry_categoryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableentry_category = ((entry_categoryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int enc_id {
                get {
                    return ((int)(this[this.tableentry_category.enc_idColumn]));
                }
                set {
                    this[this.tableentry_category.enc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string enc_name {
                get {
                    try {
                        return ((string)(this[this.tableentry_category.enc_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enc_name\' in table \'entry_category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry_category.enc_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string enc_description {
                get {
                    try {
                        return ((string)(this[this.tableentry_category.enc_descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enc_description\' in table \'entry_category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry_category.enc_descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool enc_active {
                get {
                    try {
                        return ((bool)(this[this.tableentry_category.enc_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enc_active\' in table \'entry_category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry_category.enc_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isenc_nameNull() {
                return this.IsNull(this.tableentry_category.enc_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setenc_nameNull() {
                this[this.tableentry_category.enc_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isenc_descriptionNull() {
                return this.IsNull(this.tableentry_category.enc_descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setenc_descriptionNull() {
                this[this.tableentry_category.enc_descriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isenc_activeNull() {
                return this.IsNull(this.tableentry_category.enc_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setenc_activeNull() {
                this[this.tableentry_category.enc_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow[] GetentryRows() {
                return ((entryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_entry_entry_category"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class module_fingerprintRow : System.Data.DataRow {
            
            private module_fingerprintDataTable tablemodule_fingerprint;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal module_fingerprintRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemodule_fingerprint = ((module_fingerprintDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prs_id {
                get {
                    return ((int)(this[this.tablemodule_fingerprint.prs_idColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint.prs_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int flc_id {
                get {
                    return ((int)(this[this.tablemodule_fingerprint.flc_idColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint.flc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] mfp_data {
                get {
                    return ((byte[])(this[this.tablemodule_fingerprint.mfp_dataColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint.mfp_dataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRow module_fingerprint_locationRow {
                get {
                    return ((module_fingerprint_locationRow)(this.GetParentRow(this.Table.ParentRelations["FK_module_fingerprint_module_fingerprint_location"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_module_fingerprint_module_fingerprint_location"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow personRow {
                get {
                    return ((personRow)(this.GetParentRow(this.Table.ParentRelations["FK_module_fingerprint_person"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_module_fingerprint_person"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class module_fingerprint_locationRow : System.Data.DataRow {
            
            private module_fingerprint_locationDataTable tablemodule_fingerprint_location;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal module_fingerprint_locationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemodule_fingerprint_location = ((module_fingerprint_locationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int flc_id {
                get {
                    return ((int)(this[this.tablemodule_fingerprint_location.flc_idColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint_location.flc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int flg_id {
                get {
                    return ((int)(this[this.tablemodule_fingerprint_location.flg_idColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint_location.flg_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flc_name {
                get {
                    return ((string)(this[this.tablemodule_fingerprint_location.flc_nameColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint_location.flc_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupRow module_fingerprint_location_groupRow {
                get {
                    return ((module_fingerprint_location_groupRow)(this.GetParentRow(this.Table.ParentRelations["FK_module_fingerprint_location_module_fingerprint_location_group"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_module_fingerprint_location_module_fingerprint_location_group"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRow[] Getmodule_fingerprintRows() {
                return ((module_fingerprintRow[])(base.GetChildRows(this.Table.ChildRelations["FK_module_fingerprint_module_fingerprint_location"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class module_fingerprint_location_groupRow : System.Data.DataRow {
            
            private module_fingerprint_location_groupDataTable tablemodule_fingerprint_location_group;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal module_fingerprint_location_groupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemodule_fingerprint_location_group = ((module_fingerprint_location_groupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int flg_id {
                get {
                    return ((int)(this[this.tablemodule_fingerprint_location_group.flg_idColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint_location_group.flg_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string flg_name {
                get {
                    return ((string)(this[this.tablemodule_fingerprint_location_group.flg_nameColumn]));
                }
                set {
                    this[this.tablemodule_fingerprint_location_group.flg_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRow[] Getmodule_fingerprint_locationRows() {
                return ((module_fingerprint_locationRow[])(base.GetChildRows(this.Table.ChildRelations["FK_module_fingerprint_location_module_fingerprint_location_group"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class nde_ent_smc_linkRow : System.Data.DataRow {
            
            private nde_ent_smc_linkDataTable tablende_ent_smc_link;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nde_ent_smc_linkRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablende_ent_smc_link = ((nde_ent_smc_linkDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int lnk_id {
                get {
                    return ((int)(this[this.tablende_ent_smc_link.lnk_idColumn]));
                }
                set {
                    this[this.tablende_ent_smc_link.lnk_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int smc_id {
                get {
                    try {
                        return ((int)(this[this.tablende_ent_smc_link.smc_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'smc_id\' in table \'nde_ent_smc_link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablende_ent_smc_link.smc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nde_id {
                get {
                    try {
                        return ((int)(this[this.tablende_ent_smc_link.nde_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nde_id\' in table \'nde_ent_smc_link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablende_ent_smc_link.nde_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ent_id {
                get {
                    try {
                        return ((int)(this[this.tablende_ent_smc_link.ent_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ent_id\' in table \'nde_ent_smc_link\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablende_ent_smc_link.ent_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow entryRow {
                get {
                    return ((entryRow)(this.GetParentRow(this.Table.ParentRelations["FK_nde_ent_smc_link_entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_nde_ent_smc_link_entry"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow nodeRow {
                get {
                    return ((nodeRow)(this.GetParentRow(this.Table.ParentRelations["FK_nde_ent_smc_link_node"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_nde_ent_smc_link_node"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientRow systemclientRow {
                get {
                    return ((systemclientRow)(this.GetParentRow(this.Table.ParentRelations["FK_nde_ent_smc_link_systemclient"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_nde_ent_smc_link_systemclient"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issmc_idNull() {
                return this.IsNull(this.tablende_ent_smc_link.smc_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsmc_idNull() {
                this[this.tablende_ent_smc_link.smc_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnde_idNull() {
                return this.IsNull(this.tablende_ent_smc_link.nde_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnde_idNull() {
                this[this.tablende_ent_smc_link.nde_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isent_idNull() {
                return this.IsNull(this.tablende_ent_smc_link.ent_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setent_idNull() {
                this[this.tablende_ent_smc_link.ent_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class nodeRow : System.Data.DataRow {
            
            private nodeDataTable tablenode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal nodeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablenode = ((nodeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nde_id {
                get {
                    return ((int)(this[this.tablenode.nde_idColumn]));
                }
                set {
                    this[this.tablenode.nde_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nde_name {
                get {
                    try {
                        return ((string)(this[this.tablenode.nde_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nde_name\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.nde_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndm_id {
                get {
                    try {
                        return ((int)(this[this.tablenode.ndm_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndm_id\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.ndm_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool nde_active {
                get {
                    try {
                        return ((bool)(this[this.tablenode.nde_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nde_active\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.nde_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nde_remark {
                get {
                    try {
                        return ((string)(this[this.tablenode.nde_remarkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nde_remark\' in table \'node\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode.nde_remarkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRow node_modelRow {
                get {
                    return ((node_modelRow)(this.GetParentRow(this.Table.ParentRelations["FK_node_node_model"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_node_node_model"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnde_nameNull() {
                return this.IsNull(this.tablenode.nde_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnde_nameNull() {
                this[this.tablenode.nde_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndm_idNull() {
                return this.IsNull(this.tablenode.ndm_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndm_idNull() {
                this[this.tablenode.ndm_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnde_activeNull() {
                return this.IsNull(this.tablenode.nde_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnde_activeNull() {
                this[this.tablenode.nde_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnde_remarkNull() {
                return this.IsNull(this.tablenode.nde_remarkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnde_remarkNull() {
                this[this.tablenode.nde_remarkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow[] Getnde_ent_smc_linkRows() {
                return ((nde_ent_smc_linkRow[])(base.GetChildRows(this.Table.ChildRelations["FK_nde_ent_smc_link_node"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class node_categoryRow : System.Data.DataRow {
            
            private node_categoryDataTable tablenode_category;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal node_categoryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablenode_category = ((node_categoryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndc_id {
                get {
                    return ((int)(this[this.tablenode_category.ndc_idColumn]));
                }
                set {
                    this[this.tablenode_category.ndc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ndc_name {
                get {
                    try {
                        return ((string)(this[this.tablenode_category.ndc_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndc_name\' in table \'node_category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode_category.ndc_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ndc_description {
                get {
                    try {
                        return ((string)(this[this.tablenode_category.ndc_descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndc_description\' in table \'node_category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode_category.ndc_descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ndc_active {
                get {
                    try {
                        return ((bool)(this[this.tablenode_category.ndc_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndc_active\' in table \'node_category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode_category.ndc_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndc_nameNull() {
                return this.IsNull(this.tablenode_category.ndc_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndc_nameNull() {
                this[this.tablenode_category.ndc_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndc_descriptionNull() {
                return this.IsNull(this.tablenode_category.ndc_descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndc_descriptionNull() {
                this[this.tablenode_category.ndc_descriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndc_activeNull() {
                return this.IsNull(this.tablenode_category.ndc_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndc_activeNull() {
                this[this.tablenode_category.ndc_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRow[] Getnode_modelRows() {
                return ((node_modelRow[])(base.GetChildRows(this.Table.ChildRelations["FK_node_model_node_category"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class node_modelRow : System.Data.DataRow {
            
            private node_modelDataTable tablenode_model;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal node_modelRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablenode_model = ((node_modelDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndm_id {
                get {
                    return ((int)(this[this.tablenode_model.ndm_idColumn]));
                }
                set {
                    this[this.tablenode_model.ndm_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ndc_id {
                get {
                    try {
                        return ((int)(this[this.tablenode_model.ndc_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndc_id\' in table \'node_model\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode_model.ndc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ndm_version {
                get {
                    try {
                        return ((string)(this[this.tablenode_model.ndm_versionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndm_version\' in table \'node_model\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode_model.ndm_versionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ndm_brand {
                get {
                    try {
                        return ((string)(this[this.tablenode_model.ndm_brandColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndm_brand\' in table \'node_model\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode_model.ndm_brandColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ndm_active {
                get {
                    try {
                        return ((bool)(this[this.tablenode_model.ndm_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ndm_active\' in table \'node_model\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenode_model.ndm_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryRow node_categoryRow {
                get {
                    return ((node_categoryRow)(this.GetParentRow(this.Table.ParentRelations["FK_node_model_node_category"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_node_model_node_category"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndc_idNull() {
                return this.IsNull(this.tablenode_model.ndc_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndc_idNull() {
                this[this.tablenode_model.ndc_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndm_versionNull() {
                return this.IsNull(this.tablenode_model.ndm_versionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndm_versionNull() {
                this[this.tablenode_model.ndm_versionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndm_brandNull() {
                return this.IsNull(this.tablenode_model.ndm_brandColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndm_brandNull() {
                this[this.tablenode_model.ndm_brandColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isndm_activeNull() {
                return this.IsNull(this.tablenode_model.ndm_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setndm_activeNull() {
                this[this.tablenode_model.ndm_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow[] GetnodeRows() {
                return ((nodeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_node_node_model"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class personRow : System.Data.DataRow {
            
            private personDataTable tableperson;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal personRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableperson = ((personDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prs_id {
                get {
                    return ((int)(this[this.tableperson.prs_idColumn]));
                }
                set {
                    this[this.tableperson.prs_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prs_firstname {
                get {
                    try {
                        return ((string)(this[this.tableperson.prs_firstnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'prs_firstname\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.prs_firstnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prs_middlename {
                get {
                    try {
                        return ((string)(this[this.tableperson.prs_middlenameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'prs_middlename\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.prs_middlenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string prs_lastname {
                get {
                    try {
                        return ((string)(this[this.tableperson.prs_lastnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'prs_lastname\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.prs_lastnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool prs_active {
                get {
                    try {
                        return ((bool)(this[this.tableperson.prs_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'prs_active\' in table \'person\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson.prs_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprs_firstnameNull() {
                return this.IsNull(this.tableperson.prs_firstnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprs_firstnameNull() {
                this[this.tableperson.prs_firstnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprs_middlenameNull() {
                return this.IsNull(this.tableperson.prs_middlenameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprs_middlenameNull() {
                this[this.tableperson.prs_middlenameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprs_lastnameNull() {
                return this.IsNull(this.tableperson.prs_lastnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprs_lastnameNull() {
                this[this.tableperson.prs_lastnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprs_activeNull() {
                return this.IsNull(this.tableperson.prs_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprs_activeNull() {
                this[this.tableperson.prs_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRow[] Getmodule_fingerprintRows() {
                return ((module_fingerprintRow[])(base.GetChildRows(this.Table.ChildRelations["FK_module_fingerprint_person"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRow[] Getperson_has_person_groupRows() {
                return ((person_has_person_groupRow[])(base.GetChildRows(this.Table.ChildRelations["FK_person_has_person_group_person"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserRow[] GetsystemuserRows() {
                return ((systemuserRow[])(base.GetChildRows(this.Table.ChildRelations["FK_systemuser_person"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRow[] Getperson_has_entryRows() {
                return ((person_has_entryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_person_entry_person1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRow[] Getperson_has_zoneRows() {
                return ((person_has_zoneRow[])(base.GetChildRows(this.Table.ChildRelations["FK_person_zone_person1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class person_groupRow : System.Data.DataRow {
            
            private person_groupDataTable tableperson_group;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_groupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableperson_group = ((person_groupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int psg_id {
                get {
                    return ((int)(this[this.tableperson_group.psg_idColumn]));
                }
                set {
                    this[this.tableperson_group.psg_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string psg_name {
                get {
                    try {
                        return ((string)(this[this.tableperson_group.psg_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'psg_name\' in table \'person_group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson_group.psg_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispsg_nameNull() {
                return this.IsNull(this.tableperson_group.psg_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpsg_nameNull() {
                this[this.tableperson_group.psg_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRow[] Getperson_has_person_groupRows() {
                return ((person_has_person_groupRow[])(base.GetChildRows(this.Table.ChildRelations["FK_person_has_person_group_person_group"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRow[] Getpersongroup_has_entryRows() {
                return ((persongroup_has_entryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_persongroup_entry_person_group1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRow[] Getpersongroup_has_zoneRows() {
                return ((persongroup_has_zoneRow[])(base.GetChildRows(this.Table.ChildRelations["FK_persongroup_zone_person_group1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class person_has_person_groupRow : System.Data.DataRow {
            
            private person_has_person_groupDataTable tableperson_has_person_group;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_has_person_groupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableperson_has_person_group = ((person_has_person_groupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prs_id {
                get {
                    return ((int)(this[this.tableperson_has_person_group.prs_idColumn]));
                }
                set {
                    this[this.tableperson_has_person_group.prs_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int psg_id {
                get {
                    return ((int)(this[this.tableperson_has_person_group.psg_idColumn]));
                }
                set {
                    this[this.tableperson_has_person_group.psg_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow personRow {
                get {
                    return ((personRow)(this.GetParentRow(this.Table.ParentRelations["FK_person_has_person_group_person"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_person_has_person_group_person"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow person_groupRow {
                get {
                    return ((person_groupRow)(this.GetParentRow(this.Table.ParentRelations["FK_person_has_person_group_person_group"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_person_has_person_group_person_group"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class systemclientRow : System.Data.DataRow {
            
            private systemclientDataTable tablesystemclient;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal systemclientRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesystemclient = ((systemclientDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int smc_id {
                get {
                    return ((int)(this[this.tablesystemclient.smc_idColumn]));
                }
                set {
                    this[this.tablesystemclient.smc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string smc_name {
                get {
                    try {
                        return ((string)(this[this.tablesystemclient.smc_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'smc_name\' in table \'systemclient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesystemclient.smc_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string smc_ip {
                get {
                    return ((string)(this[this.tablesystemclient.smc_ipColumn]));
                }
                set {
                    this[this.tablesystemclient.smc_ipColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string smc_remark {
                get {
                    try {
                        return ((string)(this[this.tablesystemclient.smc_remarkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'smc_remark\' in table \'systemclient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesystemclient.smc_remarkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool smc_active {
                get {
                    try {
                        return ((bool)(this[this.tablesystemclient.smc_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'smc_active\' in table \'systemclient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesystemclient.smc_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issmc_nameNull() {
                return this.IsNull(this.tablesystemclient.smc_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsmc_nameNull() {
                this[this.tablesystemclient.smc_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issmc_remarkNull() {
                return this.IsNull(this.tablesystemclient.smc_remarkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsmc_remarkNull() {
                this[this.tablesystemclient.smc_remarkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issmc_activeNull() {
                return this.IsNull(this.tablesystemclient.smc_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsmc_activeNull() {
                this[this.tablesystemclient.smc_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow[] Getnde_ent_smc_linkRows() {
                return ((nde_ent_smc_linkRow[])(base.GetChildRows(this.Table.ChildRelations["FK_nde_ent_smc_link_systemclient"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class systemuserRow : System.Data.DataRow {
            
            private systemuserDataTable tablesystemuser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal systemuserRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesystemuser = ((systemuserDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prs_id {
                get {
                    return ((int)(this[this.tablesystemuser.prs_idColumn]));
                }
                set {
                    this[this.tablesystemuser.prs_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stu_loginname {
                get {
                    try {
                        return ((string)(this[this.tablesystemuser.stu_loginnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stu_loginname\' in table \'systemuser\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesystemuser.stu_loginnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stu_password {
                get {
                    try {
                        return ((string)(this[this.tablesystemuser.stu_passwordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stu_password\' in table \'systemuser\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesystemuser.stu_passwordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool stu_active {
                get {
                    try {
                        return ((bool)(this[this.tablesystemuser.stu_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stu_active\' in table \'systemuser\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesystemuser.stu_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] stu_lastlogin {
                get {
                    try {
                        return ((byte[])(this[this.tablesystemuser.stu_lastloginColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stu_lastlogin\' in table \'systemuser\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesystemuser.stu_lastloginColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow personRow {
                get {
                    return ((personRow)(this.GetParentRow(this.Table.ParentRelations["FK_systemuser_person"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_systemuser_person"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstu_loginnameNull() {
                return this.IsNull(this.tablesystemuser.stu_loginnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstu_loginnameNull() {
                this[this.tablesystemuser.stu_loginnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstu_passwordNull() {
                return this.IsNull(this.tablesystemuser.stu_passwordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstu_passwordNull() {
                this[this.tablesystemuser.stu_passwordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstu_activeNull() {
                return this.IsNull(this.tablesystemuser.stu_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstu_activeNull() {
                this[this.tablesystemuser.stu_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstu_lastloginNull() {
                return this.IsNull(this.tablesystemuser.stu_lastloginColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstu_lastloginNull() {
                this[this.tablesystemuser.stu_lastloginColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class zoneRow : System.Data.DataRow {
            
            private zoneDataTable tablezone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal zoneRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablezone = ((zoneDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int zne_id {
                get {
                    return ((int)(this[this.tablezone.zne_idColumn]));
                }
                set {
                    this[this.tablezone.zne_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zne_name {
                get {
                    try {
                        return ((string)(this[this.tablezone.zne_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'zne_name\' in table \'zone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone.zne_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zne_remark {
                get {
                    try {
                        return ((string)(this[this.tablezone.zne_remarkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'zne_remark\' in table \'zone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone.zne_remarkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] zne_plan {
                get {
                    try {
                        return ((byte[])(this[this.tablezone.zne_planColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'zne_plan\' in table \'zone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone.zne_planColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool zne_active {
                get {
                    try {
                        return ((bool)(this[this.tablezone.zne_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'zne_active\' in table \'zone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablezone.zne_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszne_nameNull() {
                return this.IsNull(this.tablezone.zne_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzne_nameNull() {
                this[this.tablezone.zne_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszne_remarkNull() {
                return this.IsNull(this.tablezone.zne_remarkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzne_remarkNull() {
                this[this.tablezone.zne_remarkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszne_planNull() {
                return this.IsNull(this.tablezone.zne_planColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzne_planNull() {
                this[this.tablezone.zne_planColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iszne_activeNull() {
                return this.IsNull(this.tablezone.zne_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setzne_activeNull() {
                this[this.tablezone.zne_activeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow[] GetentryRows() {
                return ((entryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_entry_zone"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRow[] Getperson_has_zoneRows() {
                return ((person_has_zoneRow[])(base.GetChildRows(this.Table.ChildRelations["FK_person_zone_zone1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRow[] Getpersongroup_has_zoneRows() {
                return ((persongroup_has_zoneRow[])(base.GetChildRows(this.Table.ChildRelations["FK_persongroup_zone_zone1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class entry_controllerRow : System.Data.DataRow {
            
            private entry_controllerDataTable tableentry_controller;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entry_controllerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableentry_controller = ((entry_controllerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ecn_id {
                get {
                    return ((int)(this[this.tableentry_controller.ecn_idColumn]));
                }
                set {
                    this[this.tableentry_controller.ecn_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ecn_name {
                get {
                    try {
                        return ((string)(this[this.tableentry_controller.ecn_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ecn_name\' in table \'entry_controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry_controller.ecn_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ecn_remark {
                get {
                    try {
                        return ((string)(this[this.tableentry_controller.ecn_remarkColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ecn_remark\' in table \'entry_controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry_controller.ecn_remarkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ecn_ip {
                get {
                    try {
                        return ((string)(this[this.tableentry_controller.ecn_ipColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ecn_ip\' in table \'entry_controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry_controller.ecn_ipColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ecn_active {
                get {
                    try {
                        return ((bool)(this[this.tableentry_controller.ecn_activeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ecn_active\' in table \'entry_controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry_controller.ecn_activeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isecn_nameNull() {
                return this.IsNull(this.tableentry_controller.ecn_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setecn_nameNull() {
                this[this.tableentry_controller.ecn_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isecn_remarkNull() {
                return this.IsNull(this.tableentry_controller.ecn_remarkColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setecn_remarkNull() {
                this[this.tableentry_controller.ecn_remarkColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isecn_ipNull() {
                return this.IsNull(this.tableentry_controller.ecn_ipColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setecn_ipNull() {
                this[this.tableentry_controller.ecn_ipColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isecn_activeNull() {
                return this.IsNull(this.tableentry_controller.ecn_activeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setecn_activeNull() {
                this[this.tableentry_controller.ecn_activeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class person_has_entryRow : System.Data.DataRow {
            
            private person_has_entryDataTable tableperson_has_entry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_has_entryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableperson_has_entry = ((person_has_entryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prs_id {
                get {
                    return ((int)(this[this.tableperson_has_entry.prs_idColumn]));
                }
                set {
                    this[this.tableperson_has_entry.prs_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ent_id {
                get {
                    return ((int)(this[this.tableperson_has_entry.ent_idColumn]));
                }
                set {
                    this[this.tableperson_has_entry.ent_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool pse_access {
                get {
                    try {
                        return ((bool)(this[this.tableperson_has_entry.pse_accessColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pse_access\' in table \'person_has_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson_has_entry.pse_accessColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow entryRow {
                get {
                    return ((entryRow)(this.GetParentRow(this.Table.ParentRelations["FK_person_entry_entry1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_person_entry_entry1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow personRow {
                get {
                    return ((personRow)(this.GetParentRow(this.Table.ParentRelations["FK_person_entry_person1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_person_entry_person1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispse_accessNull() {
                return this.IsNull(this.tableperson_has_entry.pse_accessColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpse_accessNull() {
                this[this.tableperson_has_entry.pse_accessColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class person_has_zoneRow : System.Data.DataRow {
            
            private person_has_zoneDataTable tableperson_has_zone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal person_has_zoneRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableperson_has_zone = ((person_has_zoneDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int prs_id {
                get {
                    return ((int)(this[this.tableperson_has_zone.prs_idColumn]));
                }
                set {
                    this[this.tableperson_has_zone.prs_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int zne_id {
                get {
                    return ((int)(this[this.tableperson_has_zone.zne_idColumn]));
                }
                set {
                    this[this.tableperson_has_zone.zne_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool psz_access {
                get {
                    try {
                        return ((bool)(this[this.tableperson_has_zone.psz_accessColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'psz_access\' in table \'person_has_zone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableperson_has_zone.psz_accessColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow personRow {
                get {
                    return ((personRow)(this.GetParentRow(this.Table.ParentRelations["FK_person_zone_person1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_person_zone_person1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow zoneRow {
                get {
                    return ((zoneRow)(this.GetParentRow(this.Table.ParentRelations["FK_person_zone_zone1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_person_zone_zone1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispsz_accessNull() {
                return this.IsNull(this.tableperson_has_zone.psz_accessColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpsz_accessNull() {
                this[this.tableperson_has_zone.psz_accessColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class persongroup_has_entryRow : System.Data.DataRow {
            
            private persongroup_has_entryDataTable tablepersongroup_has_entry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal persongroup_has_entryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepersongroup_has_entry = ((persongroup_has_entryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int psg_id {
                get {
                    return ((int)(this[this.tablepersongroup_has_entry.psg_idColumn]));
                }
                set {
                    this[this.tablepersongroup_has_entry.psg_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ent_id {
                get {
                    return ((int)(this[this.tablepersongroup_has_entry.ent_idColumn]));
                }
                set {
                    this[this.tablepersongroup_has_entry.ent_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool pge_access {
                get {
                    try {
                        return ((bool)(this[this.tablepersongroup_has_entry.pge_accessColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pge_access\' in table \'persongroup_has_entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersongroup_has_entry.pge_accessColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow entryRow {
                get {
                    return ((entryRow)(this.GetParentRow(this.Table.ParentRelations["FK_persongroup_entry_entry1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_persongroup_entry_entry1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow person_groupRow {
                get {
                    return ((person_groupRow)(this.GetParentRow(this.Table.ParentRelations["FK_persongroup_entry_person_group1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_persongroup_entry_person_group1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispge_accessNull() {
                return this.IsNull(this.tablepersongroup_has_entry.pge_accessColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpge_accessNull() {
                this[this.tablepersongroup_has_entry.pge_accessColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class persongroup_has_zoneRow : System.Data.DataRow {
            
            private persongroup_has_zoneDataTable tablepersongroup_has_zone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal persongroup_has_zoneRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepersongroup_has_zone = ((persongroup_has_zoneDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int psg_id {
                get {
                    return ((int)(this[this.tablepersongroup_has_zone.psg_idColumn]));
                }
                set {
                    this[this.tablepersongroup_has_zone.psg_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int zne_id {
                get {
                    return ((int)(this[this.tablepersongroup_has_zone.zne_idColumn]));
                }
                set {
                    this[this.tablepersongroup_has_zone.zne_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool pgz_access {
                get {
                    try {
                        return ((bool)(this[this.tablepersongroup_has_zone.pgz_accessColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'pgz_access\' in table \'persongroup_has_zone\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepersongroup_has_zone.pgz_accessColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow person_groupRow {
                get {
                    return ((person_groupRow)(this.GetParentRow(this.Table.ParentRelations["FK_persongroup_zone_person_group1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_persongroup_zone_person_group1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow zoneRow {
                get {
                    return ((zoneRow)(this.GetParentRow(this.Table.ParentRelations["FK_persongroup_zone_zone1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_persongroup_zone_zone1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispgz_accessNull() {
                return this.IsNull(this.tablepersongroup_has_zone.pgz_accessColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpgz_accessNull() {
                this[this.tablepersongroup_has_zone.pgz_accessColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class log_entry_controllerRow : System.Data.DataRow {
            
            private log_entry_controllerDataTable tablelog_entry_controller;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal log_entry_controllerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablelog_entry_controller = ((log_entry_controllerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int lgc_id {
                get {
                    return ((int)(this[this.tablelog_entry_controller.lgc_idColumn]));
                }
                set {
                    this[this.tablelog_entry_controller.lgc_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int lgc_ent_id {
                get {
                    return ((int)(this[this.tablelog_entry_controller.lgc_ent_idColumn]));
                }
                set {
                    this[this.tablelog_entry_controller.lgc_ent_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int lgc_nde_id {
                get {
                    try {
                        return ((int)(this[this.tablelog_entry_controller.lgc_nde_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'lgc_nde_id\' in table \'log_entry_controller\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablelog_entry_controller.lgc_nde_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int lgc_prs_id {
                get {
                    return ((int)(this[this.tablelog_entry_controller.lgc_prs_idColumn]));
                }
                set {
                    this[this.tablelog_entry_controller.lgc_prs_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool lgc_powered {
                get {
                    return ((bool)(this[this.tablelog_entry_controller.lgc_poweredColumn]));
                }
                set {
                    this[this.tablelog_entry_controller.lgc_poweredColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime lgc_datetime {
                get {
                    return ((System.DateTime)(this[this.tablelog_entry_controller.lgc_datetimeColumn]));
                }
                set {
                    this[this.tablelog_entry_controller.lgc_datetimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lgc_comment {
                get {
                    return ((string)(this[this.tablelog_entry_controller.lgc_commentColumn]));
                }
                set {
                    this[this.tablelog_entry_controller.lgc_commentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow entryRow {
                get {
                    return ((entryRow)(this.GetParentRow(this.Table.ParentRelations["FK_log_entry_controller_entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_log_entry_controller_entry"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islgc_nde_idNull() {
                return this.IsNull(this.tablelog_entry_controller.lgc_nde_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlgc_nde_idNull() {
                this[this.tablelog_entry_controller.lgc_nde_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class entryRowChangeEvent : System.EventArgs {
            
            private entryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRowChangeEvent(entryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class entry_categoryRowChangeEvent : System.EventArgs {
            
            private entry_categoryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryRowChangeEvent(entry_categoryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_categoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class module_fingerprintRowChangeEvent : System.EventArgs {
            
            private module_fingerprintRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRowChangeEvent(module_fingerprintRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprintRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class module_fingerprint_locationRowChangeEvent : System.EventArgs {
            
            private module_fingerprint_locationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRowChangeEvent(module_fingerprint_locationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_locationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class module_fingerprint_location_groupRowChangeEvent : System.EventArgs {
            
            private module_fingerprint_location_groupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupRowChangeEvent(module_fingerprint_location_groupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public module_fingerprint_location_groupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class nde_ent_smc_linkRowChangeEvent : System.EventArgs {
            
            private nde_ent_smc_linkRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRowChangeEvent(nde_ent_smc_linkRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nde_ent_smc_linkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class nodeRowChangeEvent : System.EventArgs {
            
            private nodeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRowChangeEvent(nodeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public nodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class node_categoryRowChangeEvent : System.EventArgs {
            
            private node_categoryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryRowChangeEvent(node_categoryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_categoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class node_modelRowChangeEvent : System.EventArgs {
            
            private node_modelRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRowChangeEvent(node_modelRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public node_modelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class personRowChangeEvent : System.EventArgs {
            
            private personRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRowChangeEvent(personRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public personRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class person_groupRowChangeEvent : System.EventArgs {
            
            private person_groupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRowChangeEvent(person_groupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_groupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class person_has_person_groupRowChangeEvent : System.EventArgs {
            
            private person_has_person_groupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRowChangeEvent(person_has_person_groupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_person_groupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class systemclientRowChangeEvent : System.EventArgs {
            
            private systemclientRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientRowChangeEvent(systemclientRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemclientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class systemuserRowChangeEvent : System.EventArgs {
            
            private systemuserRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserRowChangeEvent(systemuserRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public systemuserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class zoneRowChangeEvent : System.EventArgs {
            
            private zoneRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRowChangeEvent(zoneRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class entry_controllerRowChangeEvent : System.EventArgs {
            
            private entry_controllerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_controllerRowChangeEvent(entry_controllerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entry_controllerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class person_has_entryRowChangeEvent : System.EventArgs {
            
            private person_has_entryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRowChangeEvent(person_has_entryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_entryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class person_has_zoneRowChangeEvent : System.EventArgs {
            
            private person_has_zoneRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRowChangeEvent(person_has_zoneRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public person_has_zoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class persongroup_has_entryRowChangeEvent : System.EventArgs {
            
            private persongroup_has_entryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRowChangeEvent(persongroup_has_entryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_entryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class persongroup_has_zoneRowChangeEvent : System.EventArgs {
            
            private persongroup_has_zoneRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRowChangeEvent(persongroup_has_zoneRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public persongroup_has_zoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class log_entry_controllerRowChangeEvent : System.EventArgs {
            
            private log_entry_controllerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerRowChangeEvent(log_entry_controllerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public log_entry_controllerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace FlexAccess_Server.FlexAccessServerDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class entryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public entryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "entry";
            tableMapping.ColumnMappings.Add("ent_id", "ent_id");
            tableMapping.ColumnMappings.Add("enc_id", "enc_id");
            tableMapping.ColumnMappings.Add("ent_active", "ent_active");
            tableMapping.ColumnMappings.Add("zne_id", "zne_id");
            tableMapping.ColumnMappings.Add("ecn_id", "ecn_id");
            tableMapping.ColumnMappings.Add("ecn_port_number", "ecn_port_number");
            tableMapping.ColumnMappings.Add("enc_powered", "enc_powered");
            tableMapping.ColumnMappings.Add("ent_name", "ent_name");
            tableMapping.ColumnMappings.Add("ent_remark", "ent_remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [entry] WHERE (([ent_id] = @Original_ent_id) AND ((@IsNull_enc_id = 1 AND [enc_id] IS NULL) OR ([enc_id] = @Original_enc_id)) AND ((@IsNull_ent_active = 1 AND [ent_active] IS NULL) OR ([ent_active] = @Original_ent_active)) AND ((@IsNull_zne_id = 1 AND [zne_id] IS NULL) OR ([zne_id] = @Original_zne_id)) AND ((@IsNull_ecn_id = 1 AND [ecn_id] IS NULL) OR ([ecn_id] = @Original_ecn_id)) AND ((@IsNull_ecn_port_number = 1 AND [ecn_port_number] IS NULL) OR ([ecn_port_number] = @Original_ecn_port_number)) AND ((@IsNull_enc_powered = 1 AND [enc_powered] IS NULL) OR ([enc_powered] = @Original_enc_powered)) AND ((@IsNull_ent_name = 1 AND [ent_name] IS NULL) OR ([ent_name] = @Original_ent_name)) AND ((@IsNull_ent_remark = 1 AND [ent_remark] IS NULL) OR ([ent_remark] = @Original_ent_remark)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_port_number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_port_number", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_port_number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_port_number", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_powered", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_powered", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_powered", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_remark", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_remark", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_remark", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [entry] ([enc_id], [ent_active], [zne_id], [ecn_id], [ecn_port_number], [enc_powered], [ent_name], [ent_remark]) VALUES (@enc_id, @ent_active, @zne_id, @ecn_id, @ecn_port_number, @enc_powered, @ent_name, @ent_remark);
SELECT ent_id, enc_id, ent_active, zne_id, ecn_id, ecn_port_number, enc_powered, ent_name, ent_remark FROM entry WHERE (ent_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_port_number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_port_number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_powered", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [entry] SET [enc_id] = @enc_id, [ent_active] = @ent_active, [zne_id] = @zne_id, [ecn_id] = @ecn_id, [ecn_port_number] = @ecn_port_number, [enc_powered] = @enc_powered, [ent_name] = @ent_name, [ent_remark] = @ent_remark WHERE (([ent_id] = @Original_ent_id) AND ((@IsNull_enc_id = 1 AND [enc_id] IS NULL) OR ([enc_id] = @Original_enc_id)) AND ((@IsNull_ent_active = 1 AND [ent_active] IS NULL) OR ([ent_active] = @Original_ent_active)) AND ((@IsNull_zne_id = 1 AND [zne_id] IS NULL) OR ([zne_id] = @Original_zne_id)) AND ((@IsNull_ecn_id = 1 AND [ecn_id] IS NULL) OR ([ecn_id] = @Original_ecn_id)) AND ((@IsNull_ecn_port_number = 1 AND [ecn_port_number] IS NULL) OR ([ecn_port_number] = @Original_ecn_port_number)) AND ((@IsNull_enc_powered = 1 AND [enc_powered] IS NULL) OR ([enc_powered] = @Original_enc_powered)) AND ((@IsNull_ent_name = 1 AND [ent_name] IS NULL) OR ([ent_name] = @Original_ent_name)) AND ((@IsNull_ent_remark = 1 AND [ent_remark] IS NULL) OR ([ent_remark] = @Original_ent_remark)));
SELECT ent_id, enc_id, ent_active, zne_id, ecn_id, ecn_port_number, enc_powered, ent_name, ent_remark FROM entry WHERE (ent_id = @ent_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_port_number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_port_number", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_powered", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_port_number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_port_number", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_port_number", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_port_number", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_powered", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_powered", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_powered", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_remark", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_remark", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_remark", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ent_id, enc_id, ent_active, zne_id, ecn_id, ecn_port_number, enc_power" +
                "ed, ent_name, ent_remark\r\nFROM         entry";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT DISTINCT entry.ent_id, entry.enc_id, entry.ent_name, entry.ent_remark, entry.ent_active
FROM         entry INNER JOIN
                      nde_ent_smc_link ON entry.ent_id = nde_ent_smc_link.ent_id INNER JOIN
                      node ON nde_ent_smc_link.nde_id = node.nde_id
WHERE     (entry.ent_active = 1) AND (node.nde_active = 1) AND (node.nde_id = @nodeID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@nodeID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT ecn_id, ecn_port_number, enc_id, enc_powered, ent_active, ent_id, ent_name" +
                ", ent_remark, zne_id FROM entry WHERE (zne_id = @zne_id) AND (ent_active = 1)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "UPDATE    entry\r\nSET              enc_powered = @powered\r\nWHERE     (ent_id = @en" +
                "t_id);     ";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@powered", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "enc_powered", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.entryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.entryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.entryDataTable dataTable = new FlexAccessServerDataSet.entryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FlexAccessServerDataSet.entryDataTable getEntryByNodeID(int nodeID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(nodeID));
            FlexAccessServerDataSet.entryDataTable dataTable = new FlexAccessServerDataSet.entryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int GetEntryByZoneID1(FlexAccessServerDataSet.entryDataTable dataTable, System.Nullable<int> zne_id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((zne_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(zne_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FlexAccessServerDataSet.entryDataTable GetEntryByZoneID(System.Nullable<int> zne_id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((zne_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(zne_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            FlexAccessServerDataSet.entryDataTable dataTable = new FlexAccessServerDataSet.entryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.entryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "entry");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ent_id, System.Nullable<int> Original_enc_id, System.Nullable<bool> Original_ent_active, System.Nullable<int> Original_zne_id, System.Nullable<int> Original_ecn_id, System.Nullable<int> Original_ecn_port_number, System.Nullable<bool> Original_enc_powered, string Original_ent_name, string Original_ent_remark) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ent_id));
            if ((Original_enc_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_enc_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_ent_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_ent_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_zne_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_zne_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_ecn_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_ecn_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_ecn_port_number.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_ecn_port_number.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_enc_powered.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_enc_powered.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_ent_name == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ent_name));
            }
            if ((Original_ent_remark == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_ent_remark));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> enc_id, System.Nullable<bool> ent_active, System.Nullable<int> zne_id, System.Nullable<int> ecn_id, System.Nullable<int> ecn_port_number, System.Nullable<bool> enc_powered, string ent_name, string ent_remark) {
            if ((enc_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(enc_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((ent_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(ent_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((zne_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(zne_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((ecn_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ecn_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((ecn_port_number.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ecn_port_number.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((enc_powered.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(enc_powered.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((ent_name == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ent_name));
            }
            if ((ent_remark == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ent_remark));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.Nullable<int> enc_id, 
                    System.Nullable<bool> ent_active, 
                    System.Nullable<int> zne_id, 
                    System.Nullable<int> ecn_id, 
                    System.Nullable<int> ecn_port_number, 
                    System.Nullable<bool> enc_powered, 
                    string ent_name, 
                    string ent_remark, 
                    int Original_ent_id, 
                    System.Nullable<int> Original_enc_id, 
                    System.Nullable<bool> Original_ent_active, 
                    System.Nullable<int> Original_zne_id, 
                    System.Nullable<int> Original_ecn_id, 
                    System.Nullable<int> Original_ecn_port_number, 
                    System.Nullable<bool> Original_enc_powered, 
                    string Original_ent_name, 
                    string Original_ent_remark, 
                    int ent_id) {
            if ((enc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(enc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((ent_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(ent_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((zne_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(zne_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((ecn_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ecn_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((ecn_port_number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ecn_port_number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((enc_powered.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(enc_powered.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((ent_name == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ent_name));
            }
            if ((ent_remark == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ent_remark));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ent_id));
            if ((Original_enc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_enc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((Original_ent_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_ent_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_zne_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_zne_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_ecn_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_ecn_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_ecn_port_number.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_ecn_port_number.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            if ((Original_enc_powered.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(Original_enc_powered.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            if ((Original_ent_name == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_ent_name));
            }
            if ((Original_ent_remark == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ent_remark));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(ent_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int updatePoweredState(System.Nullable<bool> powered, int ent_id) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((powered.HasValue == true)) {
                command.Parameters[0].Value = ((bool)(powered.Value));
            }
            else {
                command.Parameters[0].Value = System.DBNull.Value;
            }
            command.Parameters[1].Value = ((int)(ent_id));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class entry_categoryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public entry_categoryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "entry_category";
            tableMapping.ColumnMappings.Add("enc_id", "enc_id");
            tableMapping.ColumnMappings.Add("enc_name", "enc_name");
            tableMapping.ColumnMappings.Add("enc_description", "enc_description");
            tableMapping.ColumnMappings.Add("enc_active", "enc_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[entry_category] WHERE (([enc_id] = @Original_enc_id) AND ((@IsNull_enc_name = 1 AND [enc_name] IS NULL) OR ([enc_name] = @Original_enc_name)) AND ((@IsNull_enc_description = 1 AND [enc_description] IS NULL) OR ([enc_description] = @Original_enc_description)) AND ((@IsNull_enc_active = 1 AND [enc_active] IS NULL) OR ([enc_active] = @Original_enc_active)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[entry_category] ([enc_name], [enc_description], [enc_active]) " +
                "VALUES (@enc_name, @enc_description, @enc_active);\r\nSELECT enc_id, enc_name, enc" +
                "_description, enc_active FROM entry_category WHERE (enc_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[entry_category] SET [enc_name] = @enc_name, [enc_description] = @enc_description, [enc_active] = @enc_active WHERE (([enc_id] = @Original_enc_id) AND ((@IsNull_enc_name = 1 AND [enc_name] IS NULL) OR ([enc_name] = @Original_enc_name)) AND ((@IsNull_enc_description = 1 AND [enc_description] IS NULL) OR ([enc_description] = @Original_enc_description)) AND ((@IsNull_enc_active = 1 AND [enc_active] IS NULL) OR ([enc_active] = @Original_enc_active)));
SELECT enc_id, enc_name, enc_description, enc_active FROM entry_category WHERE (enc_id = @enc_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enc_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "enc_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enc_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "enc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT enc_id, enc_name, enc_description, enc_active FROM dbo.entry_category";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.entry_categoryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.entry_categoryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.entry_categoryDataTable dataTable = new FlexAccessServerDataSet.entry_categoryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.entry_categoryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "entry_category");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_enc_id, string Original_enc_name, string Original_enc_description, System.Nullable<bool> Original_enc_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_enc_id));
            if ((Original_enc_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_enc_name));
            }
            if ((Original_enc_description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_enc_description));
            }
            if ((Original_enc_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_enc_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string enc_name, string enc_description, System.Nullable<bool> enc_active) {
            if ((enc_name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(enc_name));
            }
            if ((enc_description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(enc_description));
            }
            if ((enc_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(enc_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string enc_name, string enc_description, System.Nullable<bool> enc_active, int Original_enc_id, string Original_enc_name, string Original_enc_description, System.Nullable<bool> Original_enc_active, int enc_id) {
            if ((enc_name == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(enc_name));
            }
            if ((enc_description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(enc_description));
            }
            if ((enc_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(enc_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_enc_id));
            if ((Original_enc_name == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_enc_name));
            }
            if ((Original_enc_description == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_enc_description));
            }
            if ((Original_enc_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_enc_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(enc_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class module_fingerprintTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public module_fingerprintTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "module_fingerprint";
            tableMapping.ColumnMappings.Add("prs_id", "prs_id");
            tableMapping.ColumnMappings.Add("flc_id", "flc_id");
            tableMapping.ColumnMappings.Add("mfp_data", "mfp_data");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[module_fingerprint] WHERE (([prs_id] = @Original_prs_id) AND (" +
                "[flc_id] = @Original_flc_id))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[module_fingerprint] ([prs_id], [flc_id], [mfp_data]) VALUES (@" +
                "prs_id, @flc_id, @mfp_data);\r\nSELECT prs_id, flc_id, mfp_data FROM module_finger" +
                "print WHERE (flc_id = @flc_id) AND (prs_id = @prs_id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mfp_data", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "mfp_data", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[module_fingerprint] SET [prs_id] = @prs_id, [flc_id] = @flc_id, [mfp_data] = @mfp_data WHERE (([prs_id] = @Original_prs_id) AND ([flc_id] = @Original_flc_id));
SELECT prs_id, flc_id, mfp_data FROM module_fingerprint WHERE (flc_id = @flc_id) AND (prs_id = @prs_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@mfp_data", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "mfp_data", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT prs_id, flc_id, mfp_data FROM dbo.module_fingerprint";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.module_fingerprintDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.module_fingerprintDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.module_fingerprintDataTable dataTable = new FlexAccessServerDataSet.module_fingerprintDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.module_fingerprintDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "module_fingerprint");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_prs_id, int Original_flc_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_prs_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_flc_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int prs_id, int flc_id, byte[] mfp_data) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(flc_id));
            if ((mfp_data == null)) {
                throw new System.ArgumentNullException("mfp_data");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((byte[])(mfp_data));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int prs_id, int flc_id, byte[] mfp_data, int Original_prs_id, int Original_flc_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(flc_id));
            if ((mfp_data == null)) {
                throw new System.ArgumentNullException("mfp_data");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((byte[])(mfp_data));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_prs_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_flc_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class module_fingerprint_locationTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public module_fingerprint_locationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "module_fingerprint_location";
            tableMapping.ColumnMappings.Add("flc_id", "flc_id");
            tableMapping.ColumnMappings.Add("flg_id", "flg_id");
            tableMapping.ColumnMappings.Add("flc_name", "flc_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[module_fingerprint_location] WHERE (([flc_id] = @Original_flc_" +
                "id) AND ([flg_id] = @Original_flg_id) AND ([flc_name] = @Original_flc_name))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[module_fingerprint_location] ([flg_id], [flc_name]) VALUES (@f" +
                "lg_id, @flc_name);\r\nSELECT flc_id, flg_id, flc_name FROM module_fingerprint_loca" +
                "tion WHERE (flc_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[module_fingerprint_location] SET [flg_id] = @flg_id, [flc_name] = @flc_name WHERE (([flc_id] = @Original_flc_id) AND ([flg_id] = @Original_flg_id) AND ([flc_name] = @Original_flc_name));
SELECT flc_id, flg_id, flc_name FROM module_fingerprint_location WHERE (flc_id = @flc_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flc_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "flc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT flc_id, flg_id, flc_name FROM dbo.module_fingerprint_location";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.module_fingerprint_locationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.module_fingerprint_locationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.module_fingerprint_locationDataTable dataTable = new FlexAccessServerDataSet.module_fingerprint_locationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.module_fingerprint_locationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "module_fingerprint_location");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_flc_id, int Original_flg_id, string Original_flc_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_flc_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_flg_id));
            if ((Original_flc_name == null)) {
                throw new System.ArgumentNullException("Original_flc_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_flc_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int flg_id, string flc_name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(flg_id));
            if ((flc_name == null)) {
                throw new System.ArgumentNullException("flc_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(flc_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int flg_id, string flc_name, int Original_flc_id, int Original_flg_id, string Original_flc_name, int flc_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(flg_id));
            if ((flc_name == null)) {
                throw new System.ArgumentNullException("flc_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(flc_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_flc_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_flg_id));
            if ((Original_flc_name == null)) {
                throw new System.ArgumentNullException("Original_flc_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_flc_name));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(flc_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class module_fingerprint_location_groupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public module_fingerprint_location_groupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "module_fingerprint_location_group";
            tableMapping.ColumnMappings.Add("flg_id", "flg_id");
            tableMapping.ColumnMappings.Add("flg_name", "flg_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[module_fingerprint_location_group] WHERE (([flg_id] = @Origina" +
                "l_flg_id) AND ([flg_name] = @Original_flg_name))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[module_fingerprint_location_group] ([flg_name]) VALUES (@flg_n" +
                "ame);\r\nSELECT flg_id, flg_name FROM module_fingerprint_location_group WHERE (flg" +
                "_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[module_fingerprint_location_group] SET [flg_name] = @flg_name WHERE" +
                " (([flg_id] = @Original_flg_id) AND ([flg_name] = @Original_flg_name));\r\nSELECT " +
                "flg_id, flg_name FROM module_fingerprint_location_group WHERE (flg_id = @flg_id)" +
                "";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_flg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "flg_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@flg_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "flg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT flg_id, flg_name FROM dbo.module_fingerprint_location_group";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.module_fingerprint_location_groupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.module_fingerprint_location_groupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.module_fingerprint_location_groupDataTable dataTable = new FlexAccessServerDataSet.module_fingerprint_location_groupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.module_fingerprint_location_groupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "module_fingerprint_location_group");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_flg_id, string Original_flg_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_flg_id));
            if ((Original_flg_name == null)) {
                throw new System.ArgumentNullException("Original_flg_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_flg_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string flg_name) {
            if ((flg_name == null)) {
                throw new System.ArgumentNullException("flg_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(flg_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string flg_name, int Original_flg_id, string Original_flg_name, int flg_id) {
            if ((flg_name == null)) {
                throw new System.ArgumentNullException("flg_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(flg_name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_flg_id));
            if ((Original_flg_name == null)) {
                throw new System.ArgumentNullException("Original_flg_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_flg_name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(flg_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class nde_ent_smc_linkTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nde_ent_smc_linkTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "nde_ent_smc_link";
            tableMapping.ColumnMappings.Add("lnk_id", "lnk_id");
            tableMapping.ColumnMappings.Add("smc_id", "smc_id");
            tableMapping.ColumnMappings.Add("nde_id", "nde_id");
            tableMapping.ColumnMappings.Add("ent_id", "ent_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[nde_ent_smc_link] WHERE (([lnk_id] = @Original_lnk_id) AND ((@IsNull_smc_id = 1 AND [smc_id] IS NULL) OR ([smc_id] = @Original_smc_id)) AND ((@IsNull_nde_id = 1 AND [nde_id] IS NULL) OR ([nde_id] = @Original_nde_id)) AND ((@IsNull_ent_id = 1 AND [ent_id] IS NULL) OR ([ent_id] = @Original_ent_id)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lnk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lnk_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[nde_ent_smc_link] ([smc_id], [nde_id], [ent_id]) VALUES (@smc_" +
                "id, @nde_id, @ent_id);\r\nSELECT lnk_id, smc_id, nde_id, ent_id FROM nde_ent_smc_l" +
                "ink WHERE (lnk_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[nde_ent_smc_link] SET [smc_id] = @smc_id, [nde_id] = @nde_id, [ent_id] = @ent_id WHERE (([lnk_id] = @Original_lnk_id) AND ((@IsNull_smc_id = 1 AND [smc_id] IS NULL) OR ([smc_id] = @Original_smc_id)) AND ((@IsNull_nde_id = 1 AND [nde_id] IS NULL) OR ([nde_id] = @Original_nde_id)) AND ((@IsNull_ent_id = 1 AND [ent_id] IS NULL) OR ([ent_id] = @Original_ent_id)));
SELECT lnk_id, smc_id, nde_id, ent_id FROM nde_ent_smc_link WHERE (lnk_id = @lnk_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lnk_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lnk_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lnk_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "lnk_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT lnk_id, smc_id, nde_id, ent_id FROM dbo.nde_ent_smc_link";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.nde_ent_smc_linkDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.nde_ent_smc_linkDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.nde_ent_smc_linkDataTable dataTable = new FlexAccessServerDataSet.nde_ent_smc_linkDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.nde_ent_smc_linkDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "nde_ent_smc_link");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_lnk_id, System.Nullable<int> Original_smc_id, System.Nullable<int> Original_nde_id, System.Nullable<int> Original_ent_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_lnk_id));
            if ((Original_smc_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_smc_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_nde_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_nde_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_ent_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ent_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> smc_id, System.Nullable<int> nde_id, System.Nullable<int> ent_id) {
            if ((smc_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(smc_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((nde_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(nde_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((ent_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ent_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> smc_id, System.Nullable<int> nde_id, System.Nullable<int> ent_id, int Original_lnk_id, System.Nullable<int> Original_smc_id, System.Nullable<int> Original_nde_id, System.Nullable<int> Original_ent_id, int lnk_id) {
            if ((smc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(smc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((nde_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(nde_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((ent_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ent_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_lnk_id));
            if ((Original_smc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_smc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_nde_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_nde_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_ent_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_ent_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(lnk_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class nodeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nodeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "node";
            tableMapping.ColumnMappings.Add("nde_id", "nde_id");
            tableMapping.ColumnMappings.Add("nde_name", "nde_name");
            tableMapping.ColumnMappings.Add("ndm_id", "ndm_id");
            tableMapping.ColumnMappings.Add("nde_active", "nde_active");
            tableMapping.ColumnMappings.Add("nde_remark", "nde_remark");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [node] WHERE (([nde_id] = @Original_nde_id) AND ((@IsNull_nde_name = 1 AND [nde_name] IS NULL) OR ([nde_name] = @Original_nde_name)) AND ((@IsNull_ndm_id = 1 AND [ndm_id] IS NULL) OR ([ndm_id] = @Original_ndm_id)) AND ((@IsNull_nde_active = 1 AND [nde_active] IS NULL) OR ([nde_active] = @Original_nde_active)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nde_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nde_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [node] ([nde_name], [ndm_id], [nde_active], [nde_remark]) VALUES (@nd" +
                "e_name, @ndm_id, @nde_active, @nde_remark);\r\nSELECT nde_id, nde_name, ndm_id, nd" +
                "e_active, nde_remark FROM node WHERE (nde_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [node] SET [nde_name] = @nde_name, [ndm_id] = @ndm_id, [nde_active] = @nde_active, [nde_remark] = @nde_remark WHERE (([nde_id] = @Original_nde_id) AND ((@IsNull_nde_name = 1 AND [nde_name] IS NULL) OR ([nde_name] = @Original_nde_name)) AND ((@IsNull_ndm_id = 1 AND [ndm_id] IS NULL) OR ([ndm_id] = @Original_ndm_id)) AND ((@IsNull_nde_active = 1 AND [nde_active] IS NULL) OR ([nde_active] = @Original_nde_active)));
SELECT nde_id, nde_name, ndm_id, nde_active, nde_remark FROM node WHERE (nde_id = @nde_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nde_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_name", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_nde_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_nde_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "nde_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "nde_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT nde_id, nde_name, ndm_id, nde_active, nde_remark FROM node";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT nde_id, nde_name, ndm_id, nde_active, nde_remark FROM node WHERE (nde_name" +
                " = @nde_name)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@nde_name", System.Data.SqlDbType.NChar, 10, System.Data.ParameterDirection.Input, 0, 0, "nde_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.nodeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.nodeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.nodeDataTable dataTable = new FlexAccessServerDataSet.nodeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FlexAccessServerDataSet.nodeDataTable GetNodeByName(string nde_name) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((nde_name == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(nde_name));
            }
            FlexAccessServerDataSet.nodeDataTable dataTable = new FlexAccessServerDataSet.nodeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.nodeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "node");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_nde_id, string Original_nde_name, System.Nullable<int> Original_ndm_id, System.Nullable<bool> Original_nde_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_nde_id));
            if ((Original_nde_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_nde_name));
            }
            if ((Original_ndm_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ndm_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((Original_nde_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_nde_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string nde_name, System.Nullable<int> ndm_id, System.Nullable<bool> nde_active, string nde_remark) {
            if ((nde_name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(nde_name));
            }
            if ((ndm_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ndm_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((nde_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(nde_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((nde_remark == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(nde_remark));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string nde_name, System.Nullable<int> ndm_id, System.Nullable<bool> nde_active, string nde_remark, int Original_nde_id, string Original_nde_name, System.Nullable<int> Original_ndm_id, System.Nullable<bool> Original_nde_active, int nde_id) {
            if ((nde_name == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(nde_name));
            }
            if ((ndm_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ndm_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            if ((nde_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(nde_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((nde_remark == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(nde_remark));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_nde_id));
            if ((Original_nde_name == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_nde_name));
            }
            if ((Original_ndm_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ndm_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Original_nde_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Original_nde_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(nde_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class node_categoryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public node_categoryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "node_category";
            tableMapping.ColumnMappings.Add("ndc_id", "ndc_id");
            tableMapping.ColumnMappings.Add("ndc_name", "ndc_name");
            tableMapping.ColumnMappings.Add("ndc_description", "ndc_description");
            tableMapping.ColumnMappings.Add("ndc_active", "ndc_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[node_category] WHERE (([ndc_id] = @Original_ndc_id) AND ((@IsNull_ndc_name = 1 AND [ndc_name] IS NULL) OR ([ndc_name] = @Original_ndc_name)) AND ((@IsNull_ndc_description = 1 AND [ndc_description] IS NULL) OR ([ndc_description] = @Original_ndc_description)) AND ((@IsNull_ndc_active = 1 AND [ndc_active] IS NULL) OR ([ndc_active] = @Original_ndc_active)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[node_category] ([ndc_name], [ndc_description], [ndc_active]) V" +
                "ALUES (@ndc_name, @ndc_description, @ndc_active);\r\nSELECT ndc_id, ndc_name, ndc_" +
                "description, ndc_active FROM node_category WHERE (ndc_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[node_category] SET [ndc_name] = @ndc_name, [ndc_description] = @ndc_description, [ndc_active] = @ndc_active WHERE (([ndc_id] = @Original_ndc_id) AND ((@IsNull_ndc_name = 1 AND [ndc_name] IS NULL) OR ([ndc_name] = @Original_ndc_name)) AND ((@IsNull_ndc_description = 1 AND [ndc_description] IS NULL) OR ([ndc_description] = @Original_ndc_description)) AND ((@IsNull_ndc_active = 1 AND [ndc_active] IS NULL) OR ([ndc_active] = @Original_ndc_active)));
SELECT ndc_id, ndc_name, ndc_description, ndc_active FROM node_category WHERE (ndc_id = @ndc_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_description", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_description", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ndc_id, ndc_name, ndc_description, ndc_active FROM dbo.node_category";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.node_categoryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.node_categoryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.node_categoryDataTable dataTable = new FlexAccessServerDataSet.node_categoryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.node_categoryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "node_category");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ndc_id, string Original_ndc_name, string Original_ndc_description, System.Nullable<bool> Original_ndc_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ndc_id));
            if ((Original_ndc_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ndc_name));
            }
            if ((Original_ndc_description == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ndc_description));
            }
            if ((Original_ndc_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_ndc_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ndc_name, string ndc_description, System.Nullable<bool> ndc_active) {
            if ((ndc_name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ndc_name));
            }
            if ((ndc_description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ndc_description));
            }
            if ((ndc_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(ndc_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ndc_name, string ndc_description, System.Nullable<bool> ndc_active, int Original_ndc_id, string Original_ndc_name, string Original_ndc_description, System.Nullable<bool> Original_ndc_active, int ndc_id) {
            if ((ndc_name == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ndc_name));
            }
            if ((ndc_description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ndc_description));
            }
            if ((ndc_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(ndc_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_ndc_id));
            if ((Original_ndc_name == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_ndc_name));
            }
            if ((Original_ndc_description == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_ndc_description));
            }
            if ((Original_ndc_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_ndc_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(ndc_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class node_modelTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public node_modelTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "node_model";
            tableMapping.ColumnMappings.Add("ndm_id", "ndm_id");
            tableMapping.ColumnMappings.Add("ndc_id", "ndc_id");
            tableMapping.ColumnMappings.Add("ndm_version", "ndm_version");
            tableMapping.ColumnMappings.Add("ndm_brand", "ndm_brand");
            tableMapping.ColumnMappings.Add("ndm_active", "ndm_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[node_model] WHERE (([ndm_id] = @Original_ndm_id) AND ((@IsNull_ndc_id = 1 AND [ndc_id] IS NULL) OR ([ndc_id] = @Original_ndc_id)) AND ((@IsNull_ndm_version = 1 AND [ndm_version] IS NULL) OR ([ndm_version] = @Original_ndm_version)) AND ((@IsNull_ndm_brand = 1 AND [ndm_brand] IS NULL) OR ([ndm_brand] = @Original_ndm_brand)) AND ((@IsNull_ndm_active = 1 AND [ndm_active] IS NULL) OR ([ndm_active] = @Original_ndm_active)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_version", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_brand", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_brand", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_brand", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_brand", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[node_model] ([ndc_id], [ndm_version], [ndm_brand], [ndm_active" +
                "]) VALUES (@ndc_id, @ndm_version, @ndm_brand, @ndm_active);\r\nSELECT ndm_id, ndc_" +
                "id, ndm_version, ndm_brand, ndm_active FROM node_model WHERE (ndm_id = SCOPE_IDE" +
                "NTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_brand", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_brand", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[node_model] SET [ndc_id] = @ndc_id, [ndm_version] = @ndm_version, [ndm_brand] = @ndm_brand, [ndm_active] = @ndm_active WHERE (([ndm_id] = @Original_ndm_id) AND ((@IsNull_ndc_id = 1 AND [ndc_id] IS NULL) OR ([ndc_id] = @Original_ndc_id)) AND ((@IsNull_ndm_version = 1 AND [ndm_version] IS NULL) OR ([ndm_version] = @Original_ndm_version)) AND ((@IsNull_ndm_brand = 1 AND [ndm_brand] IS NULL) OR ([ndm_brand] = @Original_ndm_brand)) AND ((@IsNull_ndm_active = 1 AND [ndm_active] IS NULL) OR ([ndm_active] = @Original_ndm_active)));
SELECT ndm_id, ndc_id, ndm_version, ndm_brand, ndm_active FROM node_model WHERE (ndm_id = @ndm_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_brand", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_brand", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_version", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_version", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_version", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_brand", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_brand", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_brand", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_brand", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ndm_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ndm_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ndm_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ndm_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ndm_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ndm_id, ndc_id, ndm_version, ndm_brand, ndm_active FROM dbo.node_model";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.node_modelDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.node_modelDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.node_modelDataTable dataTable = new FlexAccessServerDataSet.node_modelDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.node_modelDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "node_model");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ndm_id, System.Nullable<int> Original_ndc_id, string Original_ndm_version, string Original_ndm_brand, System.Nullable<bool> Original_ndm_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ndm_id));
            if ((Original_ndc_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ndc_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_ndm_version == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ndm_version));
            }
            if ((Original_ndm_brand == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ndm_brand));
            }
            if ((Original_ndm_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_ndm_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> ndc_id, string ndm_version, string ndm_brand, System.Nullable<bool> ndm_active) {
            if ((ndc_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ndc_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((ndm_version == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ndm_version));
            }
            if ((ndm_brand == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ndm_brand));
            }
            if ((ndm_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(ndm_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> ndc_id, string ndm_version, string ndm_brand, System.Nullable<bool> ndm_active, int Original_ndm_id, System.Nullable<int> Original_ndc_id, string Original_ndm_version, string Original_ndm_brand, System.Nullable<bool> Original_ndm_active, int ndm_id) {
            if ((ndc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ndc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((ndm_version == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ndm_version));
            }
            if ((ndm_brand == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ndm_brand));
            }
            if ((ndm_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(ndm_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ndm_id));
            if ((Original_ndc_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ndc_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Original_ndm_version == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_ndm_version));
            }
            if ((Original_ndm_brand == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_ndm_brand));
            }
            if ((Original_ndm_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_ndm_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(ndm_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class personTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public personTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "person";
            tableMapping.ColumnMappings.Add("prs_id", "prs_id");
            tableMapping.ColumnMappings.Add("prs_firstname", "prs_firstname");
            tableMapping.ColumnMappings.Add("prs_middlename", "prs_middlename");
            tableMapping.ColumnMappings.Add("prs_lastname", "prs_lastname");
            tableMapping.ColumnMappings.Add("prs_active", "prs_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[person] WHERE (([prs_id] = @Original_prs_id) AND ((@IsNull_prs_firstname = 1 AND [prs_firstname] IS NULL) OR ([prs_firstname] = @Original_prs_firstname)) AND ((@IsNull_prs_middlename = 1 AND [prs_middlename] IS NULL) OR ([prs_middlename] = @Original_prs_middlename)) AND ((@IsNull_prs_lastname = 1 AND [prs_lastname] IS NULL) OR ([prs_lastname] = @Original_prs_lastname)) AND ((@IsNull_prs_active = 1 AND [prs_active] IS NULL) OR ([prs_active] = @Original_prs_active)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_firstname", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_firstname", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_firstname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_firstname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_middlename", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_middlename", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_middlename", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_middlename", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_lastname", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_lastname", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_lastname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_lastname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[person] ([prs_firstname], [prs_middlename], [prs_lastname], [prs_active]) VALUES (@prs_firstname, @prs_middlename, @prs_lastname, @prs_active);
SELECT prs_id, prs_firstname, prs_middlename, prs_lastname, prs_active FROM person WHERE (prs_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_firstname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_firstname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_middlename", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_middlename", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_lastname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_lastname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[person] SET [prs_firstname] = @prs_firstname, [prs_middlename] = @prs_middlename, [prs_lastname] = @prs_lastname, [prs_active] = @prs_active WHERE (([prs_id] = @Original_prs_id) AND ((@IsNull_prs_firstname = 1 AND [prs_firstname] IS NULL) OR ([prs_firstname] = @Original_prs_firstname)) AND ((@IsNull_prs_middlename = 1 AND [prs_middlename] IS NULL) OR ([prs_middlename] = @Original_prs_middlename)) AND ((@IsNull_prs_lastname = 1 AND [prs_lastname] IS NULL) OR ([prs_lastname] = @Original_prs_lastname)) AND ((@IsNull_prs_active = 1 AND [prs_active] IS NULL) OR ([prs_active] = @Original_prs_active)));
SELECT prs_id, prs_firstname, prs_middlename, prs_lastname, prs_active FROM person WHERE (prs_id = @prs_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_firstname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_firstname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_middlename", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_middlename", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_lastname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_lastname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_firstname", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_firstname", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_firstname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_firstname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_middlename", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_middlename", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_middlename", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_middlename", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_lastname", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_lastname", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_lastname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_lastname", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_prs_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT prs_id, prs_firstname, prs_middlename, prs_lastname, prs_active FROM dbo.p" +
                "erson";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     prs_id, prs_firstname, prs_middlename, prs_lastname, prs_active\r\nFROM " +
                "        person\r\nWHERE     (prs_id = @personID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@personID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.personDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.personDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.personDataTable dataTable = new FlexAccessServerDataSet.personDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FlexAccessServerDataSet.personDataTable getPerson(int personID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(personID));
            FlexAccessServerDataSet.personDataTable dataTable = new FlexAccessServerDataSet.personDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.personDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "person");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_prs_id, string Original_prs_firstname, string Original_prs_middlename, string Original_prs_lastname, System.Nullable<bool> Original_prs_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_prs_id));
            if ((Original_prs_firstname == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_prs_firstname));
            }
            if ((Original_prs_middlename == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_prs_middlename));
            }
            if ((Original_prs_lastname == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_prs_lastname));
            }
            if ((Original_prs_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_prs_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string prs_firstname, string prs_middlename, string prs_lastname, System.Nullable<bool> prs_active) {
            if ((prs_firstname == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(prs_firstname));
            }
            if ((prs_middlename == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(prs_middlename));
            }
            if ((prs_lastname == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(prs_lastname));
            }
            if ((prs_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(prs_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string prs_firstname, string prs_middlename, string prs_lastname, System.Nullable<bool> prs_active, int Original_prs_id, string Original_prs_firstname, string Original_prs_middlename, string Original_prs_lastname, System.Nullable<bool> Original_prs_active, int prs_id) {
            if ((prs_firstname == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(prs_firstname));
            }
            if ((prs_middlename == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(prs_middlename));
            }
            if ((prs_lastname == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(prs_lastname));
            }
            if ((prs_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(prs_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_prs_id));
            if ((Original_prs_firstname == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_prs_firstname));
            }
            if ((Original_prs_middlename == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_prs_middlename));
            }
            if ((Original_prs_lastname == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_prs_lastname));
            }
            if ((Original_prs_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(Original_prs_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(prs_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class person_groupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public person_groupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "person_group";
            tableMapping.ColumnMappings.Add("psg_id", "psg_id");
            tableMapping.ColumnMappings.Add("psg_name", "psg_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[person_group] WHERE (([psg_id] = @Original_psg_id) AND ((@IsNu" +
                "ll_psg_name = 1 AND [psg_name] IS NULL) OR ([psg_name] = @Original_psg_name)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_psg_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[person_group] ([psg_name]) VALUES (@psg_name);\r\nSELECT psg_id," +
                " psg_name FROM person_group WHERE (psg_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[person_group] SET [psg_name] = @psg_name WHERE (([psg_id] = @Origin" +
                "al_psg_id) AND ((@IsNull_psg_name = 1 AND [psg_name] IS NULL) OR ([psg_name] = @" +
                "Original_psg_name)));\r\nSELECT psg_id, psg_name FROM person_group WHERE (psg_id =" +
                " @psg_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_psg_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT psg_id, psg_name FROM dbo.person_group";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     person_group.psg_id, person_group.psg_name\r\nFROM         person_group " +
                "INNER JOIN\r\n                      person_has_person_group ON person_group.psg_id" +
                " = person_has_person_group.psg_id\r\nWHERE     (person_has_person_group.prs_id = @" +
                "prs_id)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.person_groupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.person_groupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.person_groupDataTable dataTable = new FlexAccessServerDataSet.person_groupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FlexAccessServerDataSet.person_groupDataTable GetPersonGroupList(int prs_id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(prs_id));
            FlexAccessServerDataSet.person_groupDataTable dataTable = new FlexAccessServerDataSet.person_groupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.person_groupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "person_group");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_psg_id, string Original_psg_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_psg_id));
            if ((Original_psg_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_psg_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string psg_name) {
            if ((psg_name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(psg_name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string psg_name, int Original_psg_id, string Original_psg_name, int psg_id) {
            if ((psg_name == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(psg_name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_psg_id));
            if ((Original_psg_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_psg_name));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(psg_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class person_has_person_groupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public person_has_person_groupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "person_has_person_group";
            tableMapping.ColumnMappings.Add("prs_id", "prs_id");
            tableMapping.ColumnMappings.Add("psg_id", "psg_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[person_has_person_group] WHERE (([prs_id] = @Original_prs_id) " +
                "AND ([psg_id] = @Original_psg_id))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[person_has_person_group] ([prs_id], [psg_id]) VALUES (@prs_id," +
                " @psg_id);\r\nSELECT prs_id, psg_id FROM person_has_person_group WHERE (prs_id = @" +
                "prs_id) AND (psg_id = @psg_id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[person_has_person_group] SET [prs_id] = @prs_id, [psg_id] = @psg_id" +
                " WHERE (([prs_id] = @Original_prs_id) AND ([psg_id] = @Original_psg_id));\r\nSELEC" +
                "T prs_id, psg_id FROM person_has_person_group WHERE (prs_id = @prs_id) AND (psg_" +
                "id = @psg_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT prs_id, psg_id FROM dbo.person_has_person_group";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.person_has_person_groupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.person_has_person_groupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.person_has_person_groupDataTable dataTable = new FlexAccessServerDataSet.person_has_person_groupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.person_has_person_groupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "person_has_person_group");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_prs_id, int Original_psg_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_prs_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_psg_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int prs_id, int psg_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(psg_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int prs_id, int psg_id, int Original_prs_id, int Original_psg_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(psg_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_prs_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_psg_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class systemclientTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public systemclientTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "systemclient";
            tableMapping.ColumnMappings.Add("smc_id", "smc_id");
            tableMapping.ColumnMappings.Add("smc_name", "smc_name");
            tableMapping.ColumnMappings.Add("smc_ip", "smc_ip");
            tableMapping.ColumnMappings.Add("smc_remark", "smc_remark");
            tableMapping.ColumnMappings.Add("smc_active", "smc_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[systemclient] WHERE (([smc_id] = @Original_smc_id) AND ((@IsNull_smc_name = 1 AND [smc_name] IS NULL) OR ([smc_name] = @Original_smc_name)) AND ([smc_ip] = @Original_smc_ip) AND ((@IsNull_smc_active = 1 AND [smc_active] IS NULL) OR ([smc_active] = @Original_smc_active)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_smc_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_ip", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_smc_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[systemclient] ([smc_name], [smc_ip], [smc_remark], [smc_active" +
                "]) VALUES (@smc_name, @smc_ip, @smc_remark, @smc_active);\r\nSELECT smc_id, smc_na" +
                "me, smc_ip, smc_remark, smc_active FROM systemclient WHERE (smc_id = SCOPE_IDENT" +
                "ITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_ip", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[systemclient] SET [smc_name] = @smc_name, [smc_ip] = @smc_ip, [smc_remark] = @smc_remark, [smc_active] = @smc_active WHERE (([smc_id] = @Original_smc_id) AND ((@IsNull_smc_name = 1 AND [smc_name] IS NULL) OR ([smc_name] = @Original_smc_name)) AND ([smc_ip] = @Original_smc_ip) AND ((@IsNull_smc_active = 1 AND [smc_active] IS NULL) OR ([smc_active] = @Original_smc_active)));
SELECT smc_id, smc_name, smc_ip, smc_remark, smc_active FROM systemclient WHERE (smc_id = @smc_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_ip", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_smc_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_ip", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_smc_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_smc_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "smc_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "smc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT smc_id, smc_name, smc_ip, smc_remark, smc_active FROM dbo.systemclient";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     systemclient.smc_ip
FROM         entry INNER JOIN
                      nde_ent_smc_link ON entry.ent_id = nde_ent_smc_link.ent_id INNER JOIN
                      systemclient ON nde_ent_smc_link.smc_id = systemclient.smc_id
WHERE     (entry.ent_id = @entryID)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@entryID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT smc_id, smc_name, smc_ip, smc_active, smc_remark FROM systemclient WHERE (" +
                "smc_ip = @smc_ip) AND (smc_active = 1)";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@smc_ip", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "smc_ip", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.systemclientDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.systemclientDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.systemclientDataTable dataTable = new FlexAccessServerDataSet.systemclientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FlexAccessServerDataSet.systemclientDataTable GetHostByEntry(int entryID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(entryID));
            FlexAccessServerDataSet.systemclientDataTable dataTable = new FlexAccessServerDataSet.systemclientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual FlexAccessServerDataSet.systemclientDataTable systemClientData(string smc_ip) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((smc_ip == null)) {
                throw new System.ArgumentNullException("smc_ip");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(smc_ip));
            }
            FlexAccessServerDataSet.systemclientDataTable dataTable = new FlexAccessServerDataSet.systemclientDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.systemclientDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "systemclient");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_smc_id, string Original_smc_name, string Original_smc_ip, System.Nullable<bool> Original_smc_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_smc_id));
            if ((Original_smc_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_smc_name));
            }
            if ((Original_smc_ip == null)) {
                throw new System.ArgumentNullException("Original_smc_ip");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_smc_ip));
            }
            if ((Original_smc_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_smc_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string smc_name, string smc_ip, string smc_remark, System.Nullable<bool> smc_active) {
            if ((smc_name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(smc_name));
            }
            if ((smc_ip == null)) {
                throw new System.ArgumentNullException("smc_ip");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(smc_ip));
            }
            if ((smc_remark == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(smc_remark));
            }
            if ((smc_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(smc_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string smc_name, string smc_ip, string smc_remark, System.Nullable<bool> smc_active, int Original_smc_id, string Original_smc_name, string Original_smc_ip, System.Nullable<bool> Original_smc_active, int smc_id) {
            if ((smc_name == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(smc_name));
            }
            if ((smc_ip == null)) {
                throw new System.ArgumentNullException("smc_ip");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(smc_ip));
            }
            if ((smc_remark == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(smc_remark));
            }
            if ((smc_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(smc_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_smc_id));
            if ((Original_smc_name == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_smc_name));
            }
            if ((Original_smc_ip == null)) {
                throw new System.ArgumentNullException("Original_smc_ip");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_smc_ip));
            }
            if ((Original_smc_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_smc_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(smc_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class systemuserTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public systemuserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "systemuser";
            tableMapping.ColumnMappings.Add("prs_id", "prs_id");
            tableMapping.ColumnMappings.Add("stu_loginname", "stu_loginname");
            tableMapping.ColumnMappings.Add("stu_password", "stu_password");
            tableMapping.ColumnMappings.Add("stu_active", "stu_active");
            tableMapping.ColumnMappings.Add("stu_lastlogin", "stu_lastlogin");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[systemuser] WHERE (([prs_id] = @Original_prs_id) AND ([stu_las" +
                "tlogin] = @Original_stu_lastlogin))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stu_lastlogin", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_lastlogin", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[systemuser] ([prs_id], [stu_loginname], [stu_password], [stu_active]) VALUES (@prs_id, @stu_loginname, @stu_password, @stu_active);
SELECT prs_id, stu_loginname, stu_password, stu_active, stu_lastlogin FROM systemuser WHERE (prs_id = @prs_id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stu_loginname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_loginname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stu_password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stu_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[systemuser] SET [prs_id] = @prs_id, [stu_loginname] = @stu_loginname, [stu_password] = @stu_password, [stu_active] = @stu_active WHERE (([prs_id] = @Original_prs_id) AND ([stu_lastlogin] = @Original_stu_lastlogin));
SELECT prs_id, stu_loginname, stu_password, stu_active, stu_lastlogin FROM systemuser WHERE (prs_id = @prs_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stu_loginname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_loginname", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stu_password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stu_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stu_lastlogin", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "stu_lastlogin", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT prs_id, stu_loginname, stu_password, stu_active, stu_lastlogin FROM dbo.sy" +
                "stemuser";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.systemuserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.systemuserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.systemuserDataTable dataTable = new FlexAccessServerDataSet.systemuserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.systemuserDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "systemuser");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_prs_id, byte[] Original_stu_lastlogin) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_prs_id));
            if ((Original_stu_lastlogin == null)) {
                throw new System.ArgumentNullException("Original_stu_lastlogin");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((byte[])(Original_stu_lastlogin));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int prs_id, string stu_loginname, string stu_password, System.Nullable<bool> stu_active) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(prs_id));
            if ((stu_loginname == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(stu_loginname));
            }
            if ((stu_password == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(stu_password));
            }
            if ((stu_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(stu_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int prs_id, string stu_loginname, string stu_password, System.Nullable<bool> stu_active, int Original_prs_id, byte[] Original_stu_lastlogin) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(prs_id));
            if ((stu_loginname == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(stu_loginname));
            }
            if ((stu_password == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(stu_password));
            }
            if ((stu_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(stu_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_prs_id));
            if ((Original_stu_lastlogin == null)) {
                throw new System.ArgumentNullException("Original_stu_lastlogin");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(Original_stu_lastlogin));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class zoneTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public zoneTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "zone";
            tableMapping.ColumnMappings.Add("zne_id", "zne_id");
            tableMapping.ColumnMappings.Add("zne_name", "zne_name");
            tableMapping.ColumnMappings.Add("zne_remark", "zne_remark");
            tableMapping.ColumnMappings.Add("zne_plan", "zne_plan");
            tableMapping.ColumnMappings.Add("zne_active", "zne_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[zone] WHERE (([zne_id] = @Original_zne_id) AND ((@IsNull_zne_n" +
                "ame = 1 AND [zne_name] IS NULL) OR ([zne_name] = @Original_zne_name)) AND ((@IsN" +
                "ull_zne_active = 1 AND [zne_active] IS NULL) OR ([zne_active] = @Original_zne_ac" +
                "tive)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zne_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zne_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[zone] ([zne_name], [zne_remark], [zne_plan], [zne_active]) VAL" +
                "UES (@zne_name, @zne_remark, @zne_plan, @zne_active);\r\nSELECT zne_id, zne_name, " +
                "zne_remark, zne_plan, zne_active FROM zone WHERE (zne_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_plan", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_plan", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[zone] SET [zne_name] = @zne_name, [zne_remark] = @zne_remark, [zne_plan] = @zne_plan, [zne_active] = @zne_active WHERE (([zne_id] = @Original_zne_id) AND ((@IsNull_zne_name = 1 AND [zne_name] IS NULL) OR ([zne_name] = @Original_zne_name)) AND ((@IsNull_zne_active = 1 AND [zne_active] IS NULL) OR ([zne_active] = @Original_zne_active)));
SELECT zne_id, zne_name, zne_remark, zne_plan, zne_active FROM zone WHERE (zne_id = @zne_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_plan", System.Data.SqlDbType.VarBinary, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_plan", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zne_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_zne_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT zne_id, zne_name, zne_remark, zne_plan, zne_active FROM dbo.zone";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.zoneDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.zoneDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.zoneDataTable dataTable = new FlexAccessServerDataSet.zoneDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.zoneDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "zone");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_zne_id, string Original_zne_name, System.Nullable<bool> Original_zne_active) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_zne_id));
            if ((Original_zne_name == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_zne_name));
            }
            if ((Original_zne_active.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_zne_active.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string zne_name, string zne_remark, byte[] zne_plan, System.Nullable<bool> zne_active) {
            if ((zne_name == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(zne_name));
            }
            if ((zne_remark == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(zne_remark));
            }
            if ((zne_plan == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((byte[])(zne_plan));
            }
            if ((zne_active.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(zne_active.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string zne_name, string zne_remark, byte[] zne_plan, System.Nullable<bool> zne_active, int Original_zne_id, string Original_zne_name, System.Nullable<bool> Original_zne_active, int zne_id) {
            if ((zne_name == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(zne_name));
            }
            if ((zne_remark == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(zne_remark));
            }
            if ((zne_plan == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((byte[])(zne_plan));
            }
            if ((zne_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(zne_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_zne_id));
            if ((Original_zne_name == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_zne_name));
            }
            if ((Original_zne_active.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_zne_active.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(zne_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class entry_controllerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public entry_controllerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "entry_controller";
            tableMapping.ColumnMappings.Add("ecn_id", "ecn_id");
            tableMapping.ColumnMappings.Add("ecn_name", "ecn_name");
            tableMapping.ColumnMappings.Add("ecn_remark", "ecn_remark");
            tableMapping.ColumnMappings.Add("ecn_ip", "ecn_ip");
            tableMapping.ColumnMappings.Add("ecn_active", "ecn_active");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [entry_controller] WHERE (([ecn_id] = @Original_ecn_id) AND ((@IsNull_ecn_name = 1 AND [ecn_name] IS NULL) OR ([ecn_name] = @Original_ecn_name)) AND ((@IsNull_ecn_remark = 1 AND [ecn_remark] IS NULL) OR ([ecn_remark] = @Original_ecn_remark)) AND ((@IsNull_ecn_ip = 1 AND [ecn_ip] IS NULL) OR ([ecn_ip] = @Original_ecn_ip)) AND ((@IsNull_ecn_active = 1 AND [ecn_active] IS NULL) OR ([ecn_active] = @Original_ecn_active)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_remark", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_remark", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_remark", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_ip", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_ip", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_ip", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [entry_controller] ([ecn_name], [ecn_remark], [ecn_ip], [ecn_active])" +
                " VALUES (@ecn_name, @ecn_remark, @ecn_ip, @ecn_active);\r\nSELECT ecn_id, ecn_name" +
                ", ecn_remark, ecn_ip, ecn_active FROM entry_controller WHERE (ecn_id = SCOPE_IDE" +
                "NTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_ip", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [entry_controller] SET [ecn_name] = @ecn_name, [ecn_remark] = @ecn_remark, [ecn_ip] = @ecn_ip, [ecn_active] = @ecn_active WHERE (([ecn_id] = @Original_ecn_id) AND ((@IsNull_ecn_name = 1 AND [ecn_name] IS NULL) OR ([ecn_name] = @Original_ecn_name)) AND ((@IsNull_ecn_remark = 1 AND [ecn_remark] IS NULL) OR ([ecn_remark] = @Original_ecn_remark)) AND ((@IsNull_ecn_ip = 1 AND [ecn_ip] IS NULL) OR ([ecn_ip] = @Original_ecn_ip)) AND ((@IsNull_ecn_active = 1 AND [ecn_active] IS NULL) OR ([ecn_active] = @Original_ecn_active)));
SELECT ecn_id, ecn_name, ecn_remark, ecn_ip, ecn_active FROM entry_controller WHERE (ecn_id = @ecn_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_remark", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_ip", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_active", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_remark", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_remark", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_remark", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_remark", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_ip", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_ip", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_ip", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_ip", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ecn_active", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_active", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ecn_active", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ecn_active", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ecn_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ecn_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ecn_id, ecn_name, ecn_remark, ecn_ip, ecn_active\r\nFROM         entry_c" +
                "ontroller\r\nWHERE     (ecn_active = 1)";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.entry_controllerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.entry_controllerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.entry_controllerDataTable dataTable = new FlexAccessServerDataSet.entry_controllerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.entry_controllerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "entry_controller");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class person_has_entryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public person_has_entryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "person_has_entry";
            tableMapping.ColumnMappings.Add("prs_id", "prs_id");
            tableMapping.ColumnMappings.Add("ent_id", "ent_id");
            tableMapping.ColumnMappings.Add("pse_access", "pse_access");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[person_has_entry] WHERE (([prs_id] = @Original_prs_id) AND ([e" +
                "nt_id] = @Original_ent_id) AND ((@IsNull_pse_access = 1 AND [pse_access] IS NULL" +
                ") OR ([pse_access] = @Original_pse_access)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pse_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pse_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pse_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pse_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[person_has_entry] ([prs_id], [ent_id], [pse_access]) VALUES (@" +
                "prs_id, @ent_id, @pse_access);\r\nSELECT prs_id, ent_id, pse_access FROM person_ha" +
                "s_entry WHERE (ent_id = @ent_id) AND (prs_id = @prs_id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pse_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pse_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[person_has_entry] SET [prs_id] = @prs_id, [ent_id] = @ent_id, [pse_access] = @pse_access WHERE (([prs_id] = @Original_prs_id) AND ([ent_id] = @Original_ent_id) AND ((@IsNull_pse_access = 1 AND [pse_access] IS NULL) OR ([pse_access] = @Original_pse_access)));
SELECT prs_id, ent_id, pse_access FROM person_has_entry WHERE (ent_id = @ent_id) AND (prs_id = @prs_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pse_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pse_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pse_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pse_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pse_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pse_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT prs_id, ent_id, pse_access FROM dbo.person_has_entry";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     pse_access\r\nFROM         person_has_entry\r\nWHERE     (prs_id = @prs_id" +
                ") AND (ent_id = @ent_id)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.person_has_entryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.person_has_entryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.person_has_entryDataTable dataTable = new FlexAccessServerDataSet.person_has_entryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.person_has_entryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "person_has_entry");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_prs_id, int Original_ent_id, System.Nullable<bool> Original_pse_access) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_prs_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ent_id));
            if ((Original_pse_access.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_pse_access.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int prs_id, int ent_id, System.Nullable<bool> pse_access) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ent_id));
            if ((pse_access.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(pse_access.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int prs_id, int ent_id, System.Nullable<bool> pse_access, int Original_prs_id, int Original_ent_id, System.Nullable<bool> Original_pse_access) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ent_id));
            if ((pse_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(pse_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_prs_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ent_id));
            if ((Original_pse_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_pse_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object personHasEntryAccess(int prs_id, int ent_id) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(prs_id));
            command.Parameters[1].Value = ((int)(ent_id));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class person_has_zoneTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public person_has_zoneTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "person_has_zone";
            tableMapping.ColumnMappings.Add("prs_id", "prs_id");
            tableMapping.ColumnMappings.Add("zne_id", "zne_id");
            tableMapping.ColumnMappings.Add("psz_access", "psz_access");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[person_has_zone] WHERE (([prs_id] = @Original_prs_id) AND ([zn" +
                "e_id] = @Original_zne_id) AND ((@IsNull_psz_access = 1 AND [psz_access] IS NULL)" +
                " OR ([psz_access] = @Original_psz_access)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_psz_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psz_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "psz_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[person_has_zone] ([prs_id], [zne_id], [psz_access]) VALUES (@p" +
                "rs_id, @zne_id, @psz_access);\r\nSELECT prs_id, zne_id, psz_access FROM person_has" +
                "_zone WHERE (prs_id = @prs_id) AND (zne_id = @zne_id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "psz_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[person_has_zone] SET [prs_id] = @prs_id, [zne_id] = @zne_id, [psz_access] = @psz_access WHERE (([prs_id] = @Original_prs_id) AND ([zne_id] = @Original_zne_id) AND ((@IsNull_psz_access = 1 AND [psz_access] IS NULL) OR ([psz_access] = @Original_psz_access)));
SELECT prs_id, zne_id, psz_access FROM person_has_zone WHERE (prs_id = @prs_id) AND (zne_id = @zne_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "psz_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_psz_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psz_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "psz_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT prs_id, zne_id, psz_access FROM dbo.person_has_zone";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     psz_access\r\nFROM         person_has_zone\r\nWHERE     (prs_id = @prs_id)" +
                " AND (zne_id = @zne_id)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@prs_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.person_has_zoneDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.person_has_zoneDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.person_has_zoneDataTable dataTable = new FlexAccessServerDataSet.person_has_zoneDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.person_has_zoneDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "person_has_zone");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_prs_id, int Original_zne_id, System.Nullable<bool> Original_psz_access) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_prs_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_zne_id));
            if ((Original_psz_access.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_psz_access.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int prs_id, int zne_id, System.Nullable<bool> psz_access) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(zne_id));
            if ((psz_access.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(psz_access.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int prs_id, int zne_id, System.Nullable<bool> psz_access, int Original_prs_id, int Original_zne_id, System.Nullable<bool> Original_psz_access) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(prs_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(zne_id));
            if ((psz_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(psz_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_prs_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_zne_id));
            if ((Original_psz_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_psz_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object personHasZoneAccess(int prs_id, int zne_id) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(prs_id));
            command.Parameters[1].Value = ((int)(zne_id));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class persongroup_has_entryTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public persongroup_has_entryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "persongroup_has_entry";
            tableMapping.ColumnMappings.Add("psg_id", "psg_id");
            tableMapping.ColumnMappings.Add("ent_id", "ent_id");
            tableMapping.ColumnMappings.Add("pge_access", "pge_access");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[persongroup_has_entry] WHERE (([psg_id] = @Original_psg_id) AN" +
                "D ([ent_id] = @Original_ent_id) AND ((@IsNull_pge_access = 1 AND [pge_access] IS" +
                " NULL) OR ([pge_access] = @Original_pge_access)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pge_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pge_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pge_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pge_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[persongroup_has_entry] ([psg_id], [ent_id], [pge_access]) VALU" +
                "ES (@psg_id, @ent_id, @pge_access);\r\nSELECT psg_id, ent_id, pge_access FROM pers" +
                "ongroup_has_entry WHERE (ent_id = @ent_id) AND (psg_id = @psg_id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pge_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pge_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[persongroup_has_entry] SET [psg_id] = @psg_id, [ent_id] = @ent_id, [pge_access] = @pge_access WHERE (([psg_id] = @Original_psg_id) AND ([ent_id] = @Original_ent_id) AND ((@IsNull_pge_access = 1 AND [pge_access] IS NULL) OR ([pge_access] = @Original_pge_access)));
SELECT psg_id, ent_id, pge_access FROM persongroup_has_entry WHERE (ent_id = @ent_id) AND (psg_id = @psg_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pge_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pge_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pge_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pge_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pge_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pge_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT psg_id, ent_id, pge_access FROM dbo.persongroup_has_entry";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     pge_access\r\nFROM         persongroup_has_entry\r\nWHERE     (psg_id = @p" +
                "sg_id) AND (ent_id = @ent_id)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ent_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.persongroup_has_entryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.persongroup_has_entryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.persongroup_has_entryDataTable dataTable = new FlexAccessServerDataSet.persongroup_has_entryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.persongroup_has_entryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "persongroup_has_entry");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_psg_id, int Original_ent_id, System.Nullable<bool> Original_pge_access) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_psg_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ent_id));
            if ((Original_pge_access.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_pge_access.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int psg_id, int ent_id, System.Nullable<bool> pge_access) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(psg_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ent_id));
            if ((pge_access.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(pge_access.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int psg_id, int ent_id, System.Nullable<bool> pge_access, int Original_psg_id, int Original_ent_id, System.Nullable<bool> Original_pge_access) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(psg_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ent_id));
            if ((pge_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(pge_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_psg_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ent_id));
            if ((Original_pge_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_pge_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object personGroupHasEntryAccess(int psg_id, int ent_id) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(psg_id));
            command.Parameters[1].Value = ((int)(ent_id));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class persongroup_has_zoneTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public persongroup_has_zoneTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "persongroup_has_zone";
            tableMapping.ColumnMappings.Add("psg_id", "psg_id");
            tableMapping.ColumnMappings.Add("zne_id", "zne_id");
            tableMapping.ColumnMappings.Add("pgz_access", "pgz_access");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[persongroup_has_zone] WHERE (([psg_id] = @Original_psg_id) AND" +
                " ([zne_id] = @Original_zne_id) AND ((@IsNull_pgz_access = 1 AND [pgz_access] IS " +
                "NULL) OR ([pgz_access] = @Original_pgz_access)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pgz_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pgz_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pgz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pgz_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[persongroup_has_zone] ([psg_id], [zne_id], [pgz_access]) VALUE" +
                "S (@psg_id, @zne_id, @pgz_access);\r\nSELECT psg_id, zne_id, pgz_access FROM perso" +
                "ngroup_has_zone WHERE (psg_id = @psg_id) AND (zne_id = @zne_id)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pgz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pgz_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[persongroup_has_zone] SET [psg_id] = @psg_id, [zne_id] = @zne_id, [pgz_access] = @pgz_access WHERE (([psg_id] = @Original_psg_id) AND ([zne_id] = @Original_zne_id) AND ((@IsNull_pgz_access = 1 AND [pgz_access] IS NULL) OR ([pgz_access] = @Original_pgz_access)));
SELECT psg_id, zne_id, pgz_access FROM persongroup_has_zone WHERE (psg_id = @psg_id) AND (zne_id = @zne_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@pgz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pgz_access", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_psg_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_zne_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_pgz_access", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "pgz_access", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_pgz_access", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "pgz_access", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT psg_id, zne_id, pgz_access FROM dbo.persongroup_has_zone";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     pgz_access\r\nFROM         persongroup_has_zone\r\nWHERE     (psg_id = @ps" +
                "g_id) AND (zne_id = @zne_id)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@psg_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "psg_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@zne_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "zne_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.persongroup_has_zoneDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.persongroup_has_zoneDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.persongroup_has_zoneDataTable dataTable = new FlexAccessServerDataSet.persongroup_has_zoneDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.persongroup_has_zoneDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "persongroup_has_zone");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_psg_id, int Original_zne_id, System.Nullable<bool> Original_pgz_access) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_psg_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_zne_id));
            if ((Original_pgz_access.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_pgz_access.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int psg_id, int zne_id, System.Nullable<bool> pgz_access) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(psg_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(zne_id));
            if ((pgz_access.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(pgz_access.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int psg_id, int zne_id, System.Nullable<bool> pgz_access, int Original_psg_id, int Original_zne_id, System.Nullable<bool> Original_pgz_access) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(psg_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(zne_id));
            if ((pgz_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(pgz_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_psg_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_zne_id));
            if ((Original_pgz_access.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_pgz_access.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object personGroupHasZoneAccess(int psg_id, int zne_id) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(psg_id));
            command.Parameters[1].Value = ((int)(zne_id));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class log_entry_controllerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public log_entry_controllerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "log_entry_controller";
            tableMapping.ColumnMappings.Add("lgc_id", "lgc_id");
            tableMapping.ColumnMappings.Add("lgc_ent_id", "lgc_ent_id");
            tableMapping.ColumnMappings.Add("lgc_nde_id", "lgc_nde_id");
            tableMapping.ColumnMappings.Add("lgc_prs_id", "lgc_prs_id");
            tableMapping.ColumnMappings.Add("lgc_powered", "lgc_powered");
            tableMapping.ColumnMappings.Add("lgc_datetime", "lgc_datetime");
            tableMapping.ColumnMappings.Add("lgc_comment", "lgc_comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[log_entry_controller] WHERE (([lgc_id] = @Original_lgc_id) AND ([lgc_ent_id] = @Original_lgc_ent_id) AND ((@IsNull_lgc_nde_id = 1 AND [lgc_nde_id] IS NULL) OR ([lgc_nde_id] = @Original_lgc_nde_id)) AND ([lgc_prs_id] = @Original_lgc_prs_id) AND ([lgc_powered] = @Original_lgc_powered) AND ([lgc_datetime] = @Original_lgc_datetime))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_lgc_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_nde_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_nde_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_powered", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_datetime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_datetime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[log_entry_controller] ([lgc_ent_id], [lgc_nde_id], [lgc_prs_id], [lgc_powered], [lgc_datetime], [lgc_comment]) VALUES (@lgc_ent_id, @lgc_nde_id, @lgc_prs_id, @lgc_powered, @lgc_datetime, @lgc_comment);
SELECT lgc_id, lgc_ent_id, lgc_nde_id, lgc_prs_id, lgc_powered, lgc_datetime, lgc_comment FROM log_entry_controller WHERE (lgc_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_nde_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_powered", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_datetime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_datetime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[log_entry_controller] SET [lgc_ent_id] = @lgc_ent_id, [lgc_nde_id] = @lgc_nde_id, [lgc_prs_id] = @lgc_prs_id, [lgc_powered] = @lgc_powered, [lgc_datetime] = @lgc_datetime, [lgc_comment] = @lgc_comment WHERE (([lgc_id] = @Original_lgc_id) AND ([lgc_ent_id] = @Original_lgc_ent_id) AND ((@IsNull_lgc_nde_id = 1 AND [lgc_nde_id] IS NULL) OR ([lgc_nde_id] = @Original_lgc_nde_id)) AND ([lgc_prs_id] = @Original_lgc_prs_id) AND ([lgc_powered] = @Original_lgc_powered) AND ([lgc_datetime] = @Original_lgc_datetime));
SELECT lgc_id, lgc_ent_id, lgc_nde_id, lgc_prs_id, lgc_powered, lgc_datetime, lgc_comment FROM log_entry_controller WHERE (lgc_id = @lgc_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_nde_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_powered", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_datetime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_datetime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_comment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_ent_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_ent_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_lgc_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_nde_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_nde_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_nde_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_prs_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_prs_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_powered", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_powered", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_lgc_datetime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "lgc_datetime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "lgc_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::FlexAccess_Server.Properties.Settings.Default.FlexAccessServerConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT lgc_id, lgc_ent_id, lgc_nde_id, lgc_prs_id, lgc_powered, lgc_datetime, lgc" +
                "_comment FROM dbo.log_entry_controller";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "INSERT INTO log_entry_controller\r\n                      (lgc_ent_id, lgc_nde_id, " +
                "lgc_prs_id, lgc_powered, lgc_comment)\r\nVALUES     (@lgc_ent_id,@lgc_nde_id,@lgc_" +
                "prs_id,@lgc_powered,@lgc_comment)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_ent_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "lgc_ent_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_nde_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "lgc_nde_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_prs_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "lgc_prs_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_powered", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "lgc_powered", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lgc_comment", System.Data.SqlDbType.VarChar, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "lgc_comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(FlexAccessServerDataSet.log_entry_controllerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual FlexAccessServerDataSet.log_entry_controllerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FlexAccessServerDataSet.log_entry_controllerDataTable dataTable = new FlexAccessServerDataSet.log_entry_controllerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet.log_entry_controllerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(FlexAccessServerDataSet dataSet) {
            return this.Adapter.Update(dataSet, "log_entry_controller");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_lgc_id, int Original_lgc_ent_id, System.Nullable<int> Original_lgc_nde_id, int Original_lgc_prs_id, bool Original_lgc_powered, System.DateTime Original_lgc_datetime) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_lgc_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_lgc_ent_id));
            if ((Original_lgc_nde_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_lgc_nde_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_lgc_prs_id));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_lgc_powered));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_lgc_datetime));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int lgc_ent_id, System.Nullable<int> lgc_nde_id, int lgc_prs_id, bool lgc_powered, System.DateTime lgc_datetime, string lgc_comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(lgc_ent_id));
            if ((lgc_nde_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(lgc_nde_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(lgc_prs_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(lgc_powered));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(lgc_datetime));
            if ((lgc_comment == null)) {
                throw new System.ArgumentNullException("lgc_comment");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(lgc_comment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int lgc_ent_id, System.Nullable<int> lgc_nde_id, int lgc_prs_id, bool lgc_powered, System.DateTime lgc_datetime, string lgc_comment, int Original_lgc_id, int Original_lgc_ent_id, System.Nullable<int> Original_lgc_nde_id, int Original_lgc_prs_id, bool Original_lgc_powered, System.DateTime Original_lgc_datetime, int lgc_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(lgc_ent_id));
            if ((lgc_nde_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(lgc_nde_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(lgc_prs_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(lgc_powered));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(lgc_datetime));
            if ((lgc_comment == null)) {
                throw new System.ArgumentNullException("lgc_comment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(lgc_comment));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_lgc_id));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_lgc_ent_id));
            if ((Original_lgc_nde_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_lgc_nde_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_lgc_prs_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_lgc_powered));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_lgc_datetime));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(lgc_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int addLogEntryControllerRow(int lgc_ent_id, System.Nullable<int> lgc_nde_id, int lgc_prs_id, bool lgc_powered, string lgc_comment) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(lgc_ent_id));
            if ((lgc_nde_id.HasValue == true)) {
                command.Parameters[1].Value = ((int)(lgc_nde_id.Value));
            }
            else {
                command.Parameters[1].Value = System.DBNull.Value;
            }
            command.Parameters[2].Value = ((int)(lgc_prs_id));
            command.Parameters[3].Value = ((bool)(lgc_powered));
            if ((lgc_comment == null)) {
                throw new System.ArgumentNullException("lgc_comment");
            }
            else {
                command.Parameters[4].Value = ((string)(lgc_comment));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591